{"version":3,"sources":["app/Theme.js","context/auth/AuthContext.js","auth/LoginDialog.js","auth/LoginButton.js","auth/LogoutButton.js","userMenu/UserMenu.js","context/chatty/ChattyContext.js","nav/RefreshButton.js","util/fetchJson.js","context/indicators/IndicatorContext.js","replyBox/ReplyBox.js","nav/NewThreadButton.js","nav/MessagesButton.js","context/filter/FilterContext.js","filter/FilterDialog.js","filter/FilterButton.js","nav/Nav.js","thread/PostExpirationBar.js","thread/PostDate.js","thread/PostAuthor.js","thread/supportedTags.js","thread/Tags.js","thread/TagButton.js","thread/Post.js","thread/OneLine.js","thread/Comments.js","thread/Thread.js","chatty/Chatty.js","app/App.js","context/auth/AuthProvider.js","context/chatty/ChattyProvider.js","context/indicators/AsyncLoadingIndicator.js","context/indicators/IndicatorProvider.js","context/filter/FilterProvider.js","history.js","app/Root.js","index.js"],"names":["createMuiTheme","palette","type","primary","light","main","dark","secondary","typography","useNextVariants","React","createContext","LoginDialog","_ref","open","onClose","_useState","useState","_useState2","Object","slicedToArray","username","setUsername","_useState3","_useState4","password","setPassword","login","useContext","AuthContext","submit","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee","event","wrap","_context","prev","next","preventDefault","stop","this","_x","apply","arguments","react_default","createElement","Dialog_default","onSubmit","DialogTitle_default","DialogContent_default","TextField_default","autoFocus","margin","label","fullWidth","onChange","target","value","DialogActions_default","Button_default","onClick","LoginButton","setOpen","Fragment","auth_LoginDialog","logout","MenuItem_default","UserMenu","_useContext","isLoggedIn","anchorEl","setAnchorEl","IconButton_default","Person_default","core_Menu_default","keepMounted","disabled","Divider_default","LogoutButton","auth_LoginButton","withStyles","badge","top","classes","ChattyContext","newThreads","refreshChatty","displayBadge","length","title","concat","Tooltip_default","disableFocusListener","enterDelay","Badge_default","badgeContent","color","Refresh_default","fetchJson","url","options","res","body","status","statusText","result","_args","undefined","objectSpread","headers","Content-Type","querystring","stringify","fetch","sent","ok","tryJson","abrupt","console","error","Promise","reject","_callee2","text","_context2","JSON","parse","t0","_x2","card","backgroundColor","borderRadius","border","actions","flexRow","display","flexDirection","textarea","flex","padding","onCloseReplyBox","parentId","className","setLoading","IndicatorContext","setText","posting","setPosting","handleSubmit","method","log","finish","Card_default","classnames","CardHeader_default","CardContent_default","Input_default","multiline","disableUnderline","rows","placeholder","name","required","CardActions_default","variant","dialogPaper","width","Add_default","paper","replyBox_ReplyBox","totalMessagesCount","setTotalMessagesCount","unreadMessagesCount","setUnreadMessagesCount","getCounts","_ref3","total","unread","useEffect","id","setInterval","clearInterval","href","Message_default","content","FilterContext","filterSettings","setFilterSettings","showCollapsed","setShowCollapsed","FormControlLabel_default","control","Checkbox_default","checked","FilterButton","Tooltip_Tooltip_default","IconButton_IconButton_default","FilterList_default","filter_FilterDialog","white","menuButton","marginLeft","marginRight","menuItem","textDecoration","drawerOpen","setDrawerOpen","closeDrawer","AppBar_default","elevation","Toolbar_default","Menu_default","Typography_default","filter_FilterButton","nav_NewThreadButton","nav_MessagesButton","nav_RefreshButton","userMenu_UserMenu","Drawer_default","drawer","position","drawerAppBar","rel","wrapper","height","background","backgroundImage","backgroundSize","boxShadow","date","now","Date","getTime","then","percent","Math","min","style","fontSize","paddingTop","format","distanceInWordsToNow","employees","mods","user","fontWeight","cursor","&:hover","normal","self","op","mod","employee","_ref$post","post","_ref$thread","thread","_post$author","author","isSameUser","one","two","toLowerCase","replace","userClass","useMemo","find","nonBreakingAuthor","String","fromCharCode","supportedTags","containerPost","containerOneline","whiteSpace","chip","marginTop","nonChip","lolBorder","infBorder","unfBorder","wtfBorder","tagBorder","lol","inf","unf","wtf","tag","_ref$tags","tags","fixedTags","validTags","filter","includes","miscTagCount","reduce","acc","count","toConsumableArray","map","Chip_default","key","TagButton","postId","toUpperCase","handleTag","tagPost","match","warn","who","what","action","params","response","version","_x3","_x4","_x5","Label_default","marginBottom","replyBorder","replyBox","tagNws","borderLeft","tagInformative","tagFrontpage","maxWidth","header","toolbarButton","collapsed","onCollapse","onPinned","replyBoxOpenForId","onOpenReplyBox","isPostVisible","html","fixed","__html","tagClass","category","test","thread_PostAuthor","thread_Tags","lols","thread_PostDate","thread_PostExpirationBar","dangerouslySetInnerHTML","disableActionSpacing","Close_default","Reply_default","pinned","Star_default","StarBorder_default","thread_TagButton","ExitToApp_default","container","separator","oneline","overflow","textOverflow","oneline10","oneline9","oneline8","oneline7","oneline6","oneline5","oneline4","oneline3","oneline2","oneline1","onExpandReply","lineClass","recentReplyNumber","input","i","len","char","output","slice","trim","getSnippet","Comments","_ref$parent","parent","onCollapseReply","expandedReplyId","posts","thread_Post","thread_OneLine","rawThread","setExpandedReplyId","setReplyBoxOpenForId","markThread","sort","b","reverse","forEach","index","threadId","handleOpenReplyBox","handleCloseReplyBox","thread_Comments","styles","chatty","font","Chatty","threads","thread_Thread","App","nav_Nav","Switch","Route","path","component","AuthProvider","children","storageValue","localStorage","getItem","ex","removeItem","credentials","setCredentials","isValid","setItem","contextValue","Provider","ChattyProvider","mounted","setChatty","events","setEvents","_useState5","_useState6","lastEventId","setLastEventId","updateThreads","freshThreads","freshMarkedPosts","includeNewThreads","nextThreads","markedPosts","nextNewThreads","markedPostsById","maxPostIdByThread","promises","getChatty","getMarkedPosts","defineProperty","max","_ref4","all","fullReload","_ref5","_ref6","eventId","waitForEvent","_ref7","_callee3","_ref8","newerEventId","_events","_context3","_ref9","_callee4","_ref10","_context4","encodeURIComponent","_ref11","_callee5","threadCount","_context5","handleEvent","_ref12","_callee6","eventType","eventData","addReply","updateCategory","updates","updatedPostsById","updateTags","_args6","_context6","_ref13","updated","debug","_ref14","_callee7","_context7","window","scrollTo","_ref15","_callee8","_args8","_context8","progress","zIndex","loading","LinearProgress_default","IndicatorProvider","showToast","msg","indicators_AsyncLoadingIndicator","FilterProvider","showFilteredUsers","filteredUsers","showFilteredTerms","filteredTerms","some","regex","history","createHistory","Root","Component","Router","theme","Theme","indicators_IndicatorProvider","auth_AuthProvider","chatty_ChattyProvider","filter_FilterProvider","app_App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b5bca800.chunk.js","sourcesContent":["import createMuiTheme from '@material-ui/core/styles/createMuiTheme'\n\nexport default createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            light: '#6fbf73',\n            main: '#357a38',\n            dark: '#357a38'\n        },\n        secondary: {\n            light: '#33eaff',\n            main: '#00e5ff',\n            dark: '#00a0b2'\n        }\n    },\n    typography: {\n        useNextVariants: true\n    }\n})\n","import React from 'react'\n\nexport default React.createContext({})\n","import React, {useContext, useState} from 'react'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport AuthContext from '../context/auth/AuthContext'\n\nfunction LoginDialog({open, onClose}) {\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const {login} = useContext(AuthContext)\n\n    const submit = async event => {\n        event.preventDefault()\n\n        // TODO: Sync loading indicator\n        login(username, password)\n\n        setUsername('')\n        setPassword('')\n        onClose()\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose}>\n            <form onSubmit={submit}>\n                <DialogTitle>Log in</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        autoFocus\n                        margin='dense'\n                        label='Username'\n                        type='text'\n                        fullWidth\n                        onChange={event => setUsername(event.target.value)}\n                    />\n                    <TextField\n                        margin='dense'\n                        label='Password'\n                        type='password'\n                        fullWidth\n                        onChange={event => setPassword(event.target.value)}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={onClose}>Cancel</Button>\n                    <Button type='submit'>Log in</Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    )\n}\n\nexport default LoginDialog\n","import React, {useState} from 'react'\nimport Button from '@material-ui/core/Button'\nimport LoginDialog from './LoginDialog'\n\nfunction LoginButton() {\n    const [open, setOpen] = useState(false)\n    return (\n        <React.Fragment>\n            <Button onClick={() => setOpen(true)}>Log in</Button>\n\n            <LoginDialog open={open} onClose={() => setOpen(false)}/>\n        </React.Fragment>\n    )\n}\n\nexport default LoginButton\n","import React, {useContext} from 'react'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport AuthContext from '../context/auth/AuthContext'\n\nfunction LoginButton({onClick}) {\n    const {logout} = useContext(AuthContext)\n    const handleClick = () => {\n        onClick && onClick()\n        logout()\n    }\n    return <MenuItem onClick={handleClick}>Logout</MenuItem>\n}\n\nexport default LoginButton\n","import React, {useContext, useState} from 'react'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport LoginButton from '../auth/LoginButton'\nimport LogoutButton from '../auth/LogoutButton'\nimport IconButton from '@material-ui/core/IconButton'\nimport Divider from '@material-ui/core/Divider'\nimport PersonIcon from '@material-ui/icons/Person'\nimport AuthContext from '../context/auth/AuthContext'\n\nfunction UserMenu() {\n    const {isLoggedIn, username} = useContext(AuthContext)\n    const [anchorEl, setAnchorEl] = useState(null)\n\n    if (!isLoggedIn) return <LoginButton/>\n    return (\n        <React.Fragment>\n            <IconButton onClick={event => setAnchorEl(event.target)}>\n                <PersonIcon/>\n            </IconButton>\n\n            {anchorEl && <Menu\n                keepMounted\n                open={!!anchorEl}\n                anchorEl={anchorEl}\n                onClose={() => setAnchorEl(null)}\n            >\n                <MenuItem disabled>{username}</MenuItem>\n                <Divider/>\n                <LogoutButton onClick={() => setAnchorEl(null)}/>\n            </Menu>}\n        </React.Fragment>\n    )\n}\n\nexport default UserMenu\n","import React from 'react'\n\nexport default React.createContext({})\n","import React, {useContext} from 'react'\nimport IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport RefreshIcon from '@material-ui/icons/Refresh'\nimport Badge from '@material-ui/core/Badge'\nimport {withStyles} from '@material-ui/core/styles'\nimport ChattyContext from '../context/chatty/ChattyContext'\n\nfunction RefreshButton({classes}) {\n    const {newThreads, refreshChatty} = useContext(ChattyContext)\n    const displayBadge = newThreads && newThreads.length > 0\n    const title = displayBadge ? `Refresh Thread Order (${newThreads.length} new threads)` : 'Refresh Thread Order'\n\n    return (\n        <Tooltip disableFocusListener title={title} enterDelay={350}>\n            <IconButton onClick={refreshChatty}>\n                {\n                    displayBadge ?\n                        <Badge badgeContent={newThreads.length} color='secondary' classes={{badge: classes.badge}}>\n                            <RefreshIcon/>\n                        </Badge>\n                        : <RefreshIcon/>\n                }\n            </IconButton>\n        </Tooltip>\n    )\n}\n\nconst styles = {\n    badge: {\n        top: 12\n    }\n}\n\nexport default withStyles(styles)(RefreshButton)\n","import querystring from 'querystring'\n\nconst base = 'https://winchatty.com/v2'\n\nexport default async (url, options = {}) => {\n    if (options.body) {\n        options = {\n            ...options,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...options.headers\n            },\n            body: querystring.stringify(options.body)\n        }\n    }\n    let res = await fetch(`${base}/${url}`, options)\n    if (res.ok) {\n        return await tryJson(res)\n    } else {\n        let body = await tryJson(res)\n        let {status, statusText} = res\n        let result = {status, statusText, body}\n        console.error('Http Error:', result)\n        return Promise.reject(result)\n    }\n}\n\nconst tryJson = async res => {\n    let text = await res.text()\n    try {\n        return JSON.parse(text)\n    } catch (ex) {\n        return text\n    }\n}\n","import React from 'react'\n\nexport default React.createContext({})\n","import React, {useContext, useState} from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Button from '@material-ui/core/Button'\nimport {withStyles} from '@material-ui/core/styles'\nimport Input from '@material-ui/core/Input'\nimport fetchJson from '../util/fetchJson'\nimport classnames from 'classnames'\nimport AuthContext from '../context/auth/AuthContext'\nimport IndicatorContext from '../context/indicators/IndicatorContext'\n\nfunction ReplyBox({classes, onCloseReplyBox, parentId, className}) {\n    const {username, password} = useContext(AuthContext)\n    const {setLoading} = useContext(IndicatorContext)\n    const [text, setText] = useState('')\n    const [posting, setPosting] = useState(false)\n\n    const handleSubmit = async () => {\n        try {\n            setLoading('async')\n            setPosting(true)\n            let response = await fetchJson('postComment', {method: 'POST', body: {username, password, parentId, text}})\n            if (response.result === 'success') {\n                onCloseReplyBox()\n                // TODO: toast user\n            }\n        } catch (ex) {\n            console.log('Error while posting comment', ex)\n            // TODO: toast user\n        } finally {\n            setPosting(true)\n            setLoading(false)\n        }\n    }\n\n    return (\n        <Card className={classnames(className, classes.card)}>\n            {parentId === 0 && <CardHeader title='New Thread'/>}\n            <CardContent>\n                <div className={classes.flexRow}>\n                    <Input\n                        multiline\n                        autoFocus\n                        disableUnderline\n                        rows={5}\n                        fullWidth\n                        className={classes.textarea}\n                        placeholder='Type something interesting...'\n                        name='replyBody'\n                        required\n                        onChange={event => setText(event.target.value)}\n                    />\n                </div>\n            </CardContent>\n            <CardActions className={classes.actions}>\n                <Button\n                    color='primary'\n                    variant='outlined'\n                    disabled={posting || !text.length}\n                    onClick={handleSubmit}\n                >Post\n                </Button>\n                <Button\n                    variant='outlined'\n                    disabled={posting}\n                    onClick={onCloseReplyBox}\n                >Cancel\n                </Button>\n            </CardActions>\n        </Card>\n    )\n}\n\nconst styles = {\n    card: {\n        backgroundColor: '#202224',\n        borderRadius: 0,\n        border: '1px solid #656565'\n    },\n    actions: {\n        margin: '-8px 0 8px 8px'\n    },\n    flexRow: {\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    textarea: {\n        flex: 1,\n        backgroundColor: '#000',\n        padding: 4\n    }\n}\n\nexport default withStyles(styles)(ReplyBox)\n","import React, {useContext, useState} from 'react'\nimport IconButton from '@material-ui/core/IconButton'\nimport AddIcon from '../../node_modules/@material-ui/icons/Add'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Dialog from '@material-ui/core/Dialog'\nimport ReplyBox from '../replyBox/ReplyBox'\nimport {withStyles} from '@material-ui/core/styles'\nimport AuthContext from '../context/auth/AuthContext'\n\nfunction NewThreadButton({classes}) {\n    const {isLoggedIn} = useContext(AuthContext)\n    const [open, setOpen] = useState(false)\n    if (!isLoggedIn) return null\n\n    return (\n        <React.Fragment>\n            <Tooltip disableFocusListener title='New Thread' enterDelay={350}>\n                <IconButton onClick={() => setOpen(true)}>\n                    <AddIcon/>\n                </IconButton>\n            </Tooltip>\n            <Dialog\n                open={open}\n                onClose={() => setOpen(false)}\n                classes={{paper: classes.dialogPaper}}\n            >\n                <ReplyBox\n                    parentId={0}\n                    onCloseReplyBox={() => setOpen(false)}\n                />\n            </Dialog>\n        </React.Fragment>\n    )\n}\n\nconst styles = {\n    dialogPaper: {\n        width: '85vw'\n    }\n}\n\nexport default withStyles(styles)(NewThreadButton)\n","import React, {useContext, useEffect, useState} from 'react'\nimport IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport MessageIcon from '@material-ui/icons/Message'\nimport Badge from '@material-ui/core/Badge'\nimport {withStyles} from '@material-ui/core/styles'\nimport fetchJson from '../util/fetchJson'\nimport AuthContext from '../context/auth/AuthContext'\n\nfunction MessagesButton({classes}) {\n    const {isLoggedIn, username, password} = useContext(AuthContext)\n\n    const [totalMessagesCount, setTotalMessagesCount] = useState(0)\n    const [unreadMessagesCount, setUnreadMessagesCount] = useState(0)\n\n    const displayBadge = unreadMessagesCount > 0\n    const title = `( ${unreadMessagesCount} / ${totalMessagesCount} ) unread messages`\n\n    const getCounts = async () => {\n        if (isLoggedIn) {\n            const options = {method: 'POST', body: {username, password}}\n            const {total, unread} = await fetchJson('getMessageCount', options)\n            setTotalMessagesCount(total)\n            setUnreadMessagesCount(unread)\n        }\n    }\n\n    // update counts every 15 minutes\n    useEffect(() => {\n        getCounts()\n\n        const id = setInterval(() => getCounts(), 15 * 60 * 1000)\n        return () => clearInterval(id)\n    }, [isLoggedIn])\n\n    if (!isLoggedIn) return null\n    return (\n        <Tooltip disableFocusListener title={title} enterDelay={350}>\n            <IconButton href='https://www.shacknews.com/messages' target='_blank'>\n                {\n                    displayBadge\n                        ? <Badge\n                            badgeContent={unreadMessagesCount}\n                            color='secondary'\n                            classes={{badge: classes.badge}}\n                        >\n                            <MessageIcon/>\n                        </Badge>\n                        : <MessageIcon/>\n                }\n            </IconButton>\n        </Tooltip>\n    )\n}\n\nconst styles = {\n    badge: {\n        top: 12\n    }\n}\n\nexport default withStyles(styles)(MessagesButton)\n","import React from 'react'\n\nexport default React.createContext({})\n","import React, {useContext, useState} from 'react'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Dialog from '@material-ui/core/Dialog'\nimport Button from '@material-ui/core/Button'\nimport FilterContext from '../context/filter/FilterContext'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport {withStyles} from '@material-ui/core/styles'\n\nfunction FilterDialog({classes, open, onClose}) {\n    const {filterSettings, setFilterSettings} = useContext(FilterContext)\n    const [showCollapsed, setShowCollapsed] = useState(filterSettings.showCollapsed)\n\n    const handleSave = () => {\n        onClose()\n        setFilterSettings({\n            showCollapsed\n        })\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose}>\n            <DialogTitle>Filter Threads/Posts</DialogTitle>\n            <DialogContent className={classes.content}>\n                <FormControlLabel\n                    label='Show Collapsed Threads'\n                    control={\n                        <Checkbox\n                            checked={showCollapsed}\n                            onChange={() => setShowCollapsed(!showCollapsed)}\n                            value='showCollapsed'\n                        />\n                    }\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose}>Cancel</Button>\n                <Button onClick={handleSave}>Save</Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nconst styles = {\n    content: {\n        display: 'flex',\n        flexDirection: 'column'\n    }\n}\n\nexport default withStyles(styles)(FilterDialog)\n","import React, {useState} from 'react'\nimport IconButton from '@material-ui/core/IconButton/IconButton'\nimport FilterListIcon from '@material-ui/icons/FilterList'\nimport Tooltip from '@material-ui/core/Tooltip/Tooltip'\nimport FilterDialog from './FilterDialog'\n\nfunction FilterButton() {\n    const [open, setOpen] = useState(false)\n    return (\n        <React.Fragment>\n            <Tooltip disableFocusListener title='Filter Threads/Posts' enterDelay={350}>\n                <IconButton onClick={() => setOpen(true)}>\n                    <FilterListIcon/>\n                </IconButton>\n            </Tooltip>\n\n            <FilterDialog open={open} onClose={() => setOpen(false)}/>\n        </React.Fragment>\n    )\n}\n\nexport default FilterButton\n","import React, {useState} from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport {withStyles} from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport UserMenu from '../userMenu/UserMenu'\nimport RefreshButton from './RefreshButton'\nimport NewThreadButton from './NewThreadButton'\nimport MessagesButton from './MessagesButton'\nimport FilterButton from '../filter/FilterButton'\nimport Drawer from '@material-ui/core/Drawer'\n\nfunction Nav({classes}) {\n    const [drawerOpen, setDrawerOpen] = useState(false)\n    const closeDrawer = () => setDrawerOpen(false)\n\n    return (\n        <React.Fragment>\n            <AppBar elevation={0}>\n                <Toolbar>\n                    <IconButton className={classes.menuButton} onClick={() => setDrawerOpen(!drawerOpen)}>\n                        <MenuIcon className={classes.white}/>\n                    </IconButton>\n\n                    <Typography variant=\"h5\" className={classes.title}>Chatty</Typography>\n\n                    <FilterButton/>\n                    <NewThreadButton/>\n                    <MessagesButton/>\n                    <RefreshButton/>\n                    <UserMenu/>\n                </Toolbar>\n            </AppBar>\n\n            <Drawer open={drawerOpen} onClose={closeDrawer} className={classes.drawer}>\n                <AppBar position=\"static\" color=\"primary\" className={classes.drawerAppBar}>\n                    <Toolbar>\n                        <Typography variant=\"h6\" className={classes.title}>Latest Chatty</Typography>\n                    </Toolbar>\n                </AppBar>\n\n                <a\n                    href=\"https://github.com/latestchatty/chatty\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className={classes.menuItem}>\n                    <MenuItem onClick={closeDrawer}>Contribute</MenuItem>\n                </a>\n                <a\n                    href=\"https://github.com/latestchatty/chatty/issues\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className={classes.menuItem}>\n                    <MenuItem onClick={closeDrawer}>Feedback</MenuItem>\n                </a>\n            </Drawer>\n        </React.Fragment>\n    )\n}\n\nconst styles = {\n    white: {\n        color: '#fff'\n    },\n    title: {\n        color: '#fff',\n        flex: 1\n    },\n    menuButton: {\n        marginLeft: -15,\n        marginRight: 8\n    },\n    menuItem: {\n        textDecoration: 'none',\n        color: 'inherit'\n    }\n}\n\nexport default withStyles(styles)(Nav)\n","import React from 'react'\nimport {withStyles} from '@material-ui/core/styles'\n\nfunction PostExpirationBar({classes, date}) {\n    const now = (new Date().getTime())\n    const then = new Date(date).getTime()\n    const percent = Math.min((((now - then) / 3600000) / 18) * 100, 100)\n\n    let backgroundColor = 'red'\n    if (percent <= 25) {\n        backgroundColor = 'springgreen'\n    } else if (percent <= 50) {\n        backgroundColor = 'yellow'\n    } else if (percent <= 75) {\n        backgroundColor = 'orange'\n    }\n\n    return (\n        <div className={classes.wrapper}>\n            <div\n                className={classes.value}\n                style={{width: `${percent}%`, backgroundColor}}\n            />\n        </div>\n    )\n}\n\nconst styles = {\n    wrapper: {\n        height: 8,\n        width: 48,\n        margin: 7,\n        background:\n            `rgb(221, 221, 221) -webkit-gradient(\n                linear,\n                0% 0%,\n                0% 100%,\n                from(rgb(170, 170, 170)),\n                color-stop(0.4, rgb(204, 204, 204)),\n                color-stop(0.6, rgb(204, 204, 204)),\n                to(rgb(238, 238, 238))\n            )`\n    },\n    value: {\n        height: 8,\n        backgroundImage:\n            `-webkit-gradient(\n                linear,\n                0 100%,\n                100% 0,\n                color-stop(0.25, rgba(255, 255, 255, 0.4)),\n                color-stop(0.25, transparent),\n                color-stop(0.5, transparent),\n                color-stop(0.5, rgba(255, 255, 255, 0.4)),\n                color-stop(0.75, rgba(255, 255, 255, 0.4)),\n                color-stop(0.75, transparent),\n                to(transparent)\n            )`,\n        backgroundSize: '25px 25px',\n        boxShadow: 'rgba(255, 255, 255, 0.298039) 0 2px 4px inset, rgba(0, 0, 0, 0.4) 0 -2px 3px inset'\n    }\n}\n\nexport default withStyles(styles)(PostExpirationBar)\n","import React from 'react'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport format from 'date-fns/format'\nimport distanceInWordsToNow from 'date-fns/distance_in_words_to_now'\nimport {withStyles} from '@material-ui/core/styles'\n\nfunction PostDate({classes, date}) {\n    return (\n        <Tooltip disableFocusListener title={format(date, 'MMM DD, YYYY h:mma')} enterDelay={350}>\n            <div className={classes.date}>{distanceInWordsToNow(date)} ago</div>\n        </Tooltip>\n    )\n}\n\nconst styles = {\n    date: {\n        fontSize: 10,\n        color: '#888',\n        paddingTop: 3,\n        marginRight: 3\n    }\n}\n\nexport default withStyles(styles)(PostDate)\n","import React, {useContext, useMemo} from 'react'\nimport {withStyles} from '@material-ui/core/styles'\nimport classnames from 'classnames'\nimport AuthContext from '../context/auth/AuthContext'\n\nfunction PostAuthor({classes, post = {}, thread = {}}) {\n    const {username} = useContext(AuthContext)\n    const {author = ''} = post\n\n    const isSameUser = (one = '', two = '') => {\n        const left = one.toLowerCase().replace(/\\s/g, '')\n        const right = two.toLowerCase().replace(/\\s/g, '')\n        return left === right\n    }\n\n    const userClass = useMemo(() => {\n        if (username && isSameUser(author, username)) return 'self'\n        else if (thread.id !== post.id && isSameUser(thread.author, author)) return 'op'\n        else if (employees.find(employee => isSameUser(employee, author))) return 'employee'\n        else if (mods.find(mod => isSameUser(mod, author))) return 'mod'\n        return 'normal'\n    }, [username, author, thread.id, post.id, thread.author])\n\n    // Don't let the browser line break in the middle of author name\n    const nonBreakingAuthor = useMemo(() => author.replace(/\\s/g, String.fromCharCode(160)), [author])\n\n    return (\n        <span className={classnames(classes.user, classes[userClass])}>\n            {nonBreakingAuthor}\n        </span>\n    )\n}\n\nconst employees = [\n    'themanwiththebriefcase',\n    'shacknews'\n]\nconst mods = []\n\nconst styles = {\n    user: {\n        fontSize: 14,\n        fontWeight: 'bold',\n        cursor: 'pointer',\n        '&:hover': {\n            textDecoration: 'underline'\n        }\n    },\n    normal: {\n        color: '#f3e7b5'\n    },\n    self: {\n        color: '#6cf'\n    },\n    op: {\n        color: '#6aff94'\n    },\n    mod: {\n        color: '#d20000'\n    },\n    employee: {\n        color: '#9370db'\n    }\n}\n\nexport default withStyles(styles)(PostAuthor)\n","export default ['lol', 'inf', 'unf', 'wtf']\n","import React, {useMemo} from 'react'\nimport Chip from '@material-ui/core/Chip'\nimport {withStyles} from '@material-ui/core/styles'\nimport classnames from 'classnames'\nimport supportedTags from './supportedTags'\n\nfunction Tags({classes, tags = [], variant}) {\n    const fixedTags = useMemo(() => {\n        const validTags = tags.filter(tag => supportedTags.includes(tag.tag))\n        const miscTagCount = tags.filter(tag => !supportedTags.includes(tag.tag))\n            .reduce((acc, tag) => acc + tag.count, 0)\n        return [\n            ...validTags,\n            {tag: 'tag', count: miscTagCount}\n        ]\n    }, [tags])\n\n    return (\n        <div className={variant === 'post' ? classes.containerPost : classes.containerOneline}>\n            {fixedTags.map(tag => {\n                if (tag.count < 1) return null\n                else if (variant === 'post') {\n                    return (\n                        <Chip\n                            key={tag.tag}\n                            className={classnames(classes.chip, classes[tag.tag], classes[`${tag.tag}Border`])}\n                            label={`${tag.count} ${tag.tag}`}\n                            variant='outlined'\n                        />\n                    )\n                } else if (variant === 'oneline') {\n                    return (\n                        <span key={tag.tag} className={classnames(classes.nonChip, classes[tag.tag])}>\n                            {`${tag.count} ${tag.tag}`}\n                        </span>\n                    )\n                }\n                return null\n            })}\n        </div>\n    )\n}\n\nconst styles = {\n    containerPost: {\n        marginLeft: 12\n    },\n    containerOneline: {\n        marginLeft: 4,\n        whiteSpace: 'nowrap'\n    },\n    chip: {\n        height: 16,\n        marginTop: 2,\n        marginRight: 6,\n        fontSize: 10\n    },\n    nonChip: {\n        marginRight: 4,\n        fontSize: 9\n    },\n    lolBorder: {\n        border: '1px solid #f80'\n    },\n    infBorder: {\n        border: '1px solid #09c'\n    },\n    unfBorder: {\n        border: '1px solid #f00'\n    },\n    wtfBorder: {\n        border: '1px solid #c000c0'\n    },\n    tagBorder: {\n        border: '1px solid #bbaf57'\n    },\n    lol: {\n        color: '#f80'\n    },\n    inf: {\n        color: '#09c'\n    },\n    unf: {\n        color: '#f00'\n    },\n    wtf: {\n        color: '#c000c0'\n    },\n    tag: {\n        color: '#bbaf57'\n    }\n}\n\nexport default withStyles(styles)(Tags)\n","import React, {useContext, useState} from 'react'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport LabelIcon from '@material-ui/icons/Label'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport querystring from 'querystring'\nimport AuthContext from '../context/auth/AuthContext'\nimport supportedTags from './supportedTags'\nimport IndicatorContext from '../context/indicators/IndicatorContext'\n\nfunction TagButton({className, postId}) {\n    const {isLoggedIn, username} = useContext(AuthContext)\n    const {setLoading} = useContext(IndicatorContext)\n    const [anchorEl, setAnchorEl] = useState(null)\n\n    const tags = supportedTags.map(tag => tag.toUpperCase())\n\n    const handleTag = async tag => {\n        try {\n            setLoading('async')\n            setAnchorEl(null)\n\n            let text = await tagPost(username, postId, tag)\n            if (text.includes('already tagged')) {\n                text = await tagPost(username, postId, tag, 'untag')\n            }\n            if (!text.match(/^ok /)) {\n                console.warn('Error tagging post', text)\n            }\n            // TODO: toast user\n        } catch (err) {\n            console.error('Exception while tagging post', err)\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    const tagPost = async (who, what, tag, action) => {\n        const base = 'https://www.lmnopc.com/greasemonkey/shacklol/report.php'\n        const params = querystring.stringify({who, what, tag, version: '-1'})\n        if (action) params.action = action\n        const response = await fetch(`${base}?${params}`)\n        return response.text()\n    }\n\n    if (!isLoggedIn) return null\n    return (\n        <React.Fragment>\n            <Tooltip disableFocusListener title='Tag Post' enterDelay={350}>\n                <LabelIcon className={className} onClick={event => setAnchorEl(event.target)}/>\n            </Tooltip>\n\n            {\n                anchorEl && <Menu\n                    keepMounted\n                    open={!!anchorEl}\n                    anchorEl={anchorEl}\n                    onClose={() => setAnchorEl(null)}\n                >\n                    {tags.map(tag => <MenuItem onClick={() => handleTag(tag)}>{tag}</MenuItem>)}\n                </Menu>\n            }\n        </React.Fragment>\n    )\n}\n\nexport default TagButton\n","import React, {useContext, useMemo} from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport CloseIcon from '@material-ui/icons/Close'\nimport StarIcon from '@material-ui/icons/Star'\nimport StarBorderIcon from '@material-ui/icons/StarBorder'\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp'\nimport ReplyIcon from '@material-ui/icons/Reply'\nimport {withStyles} from '@material-ui/core/styles'\nimport PostExpirationBar from './PostExpirationBar'\nimport PostDate from './PostDate'\nimport PostAuthor from './PostAuthor'\nimport classnames from 'classnames'\nimport ReplyBox from '../replyBox/ReplyBox'\nimport Tags from './Tags'\nimport TagButton from './TagButton'\nimport AuthContext from '../context/auth/AuthContext'\nimport FilterContext from '../context/filter/FilterContext'\n\nfunction Post({classes, post, thread, onCollapse, onPinned, replyBoxOpenForId, onOpenReplyBox, onCloseReplyBox}) {\n    const {isLoggedIn} = useContext(AuthContext)\n    const {isPostVisible} = useContext(FilterContext)\n\n    const html = useMemo(() => {\n        let fixed = post.body\n        if (post.author === 'Shacknews') {\n            fixed = post.body.replace('href=\"/', 'href=\"https://www.shacknews.com/')\n        }\n        return {__html: fixed}\n    }, [post.body])\n\n    const tagClass = useMemo(() => {\n        if (post.category === 'nuked') {\n            return null\n        } else if (post.category === 'nws') {\n            return 'tagNws'\n        } else if (post.category === 'informative') {\n            return 'tagInformative'\n        } else if (/shacknews/i.test(post.author)) {\n            return 'tagFrontpage'\n        }\n        return null\n    }, [post.category, post.author])\n\n    const replyBorder = post.parentId > 0 ? 'replyBorder' : null\n\n    const handleReplyClick = () => onOpenReplyBox(post.id)\n\n    if (!isPostVisible(thread, post)) return null\n    return (\n        <React.Fragment>\n            <Card className={classnames(classes.card, classes[tagClass], classes[replyBorder])}>\n                <div className={classes.header}>\n                    <PostAuthor post={post} thread={thread}/>\n\n                    <Tags tags={post.lols} variant='post'/>\n\n                    <span className={classes.flex}/>\n\n                    <PostDate date={post.date}/>\n\n                    {post.parentId === 0 && <PostExpirationBar date={post.date}/>}\n                </div>\n\n                <CardContent className={classnames('postbody', classes.content)}>\n                    <span dangerouslySetInnerHTML={html}/>\n                </CardContent>\n\n                <CardActions className={classes.actions} disableActionSpacing>\n                    <Tooltip\n                        disableFocusListener\n                        title={post.collapsed ? 'Uncollapse' : 'Collapse'}\n                        enterDelay={350}\n                    >\n                        <CloseIcon\n                            className={\n                                classnames(classes.toolbarButton, post.collapsed ? classes.collapsed : null)\n                            }\n                            onClick={onCollapse}\n                        />\n                    </Tooltip>\n\n                    {\n                        isLoggedIn &&\n                        <Tooltip disableFocusListener title='Reply' enterDelay={350}>\n                            <ReplyIcon className={classes.toolbarButton} onClick={handleReplyClick}/>\n                        </Tooltip>\n                    }\n\n                    {\n                        isLoggedIn && post.parentId === 0 &&\n                        <React.Fragment>\n                            {\n                                post.pinned &&\n                                <Tooltip disableFocusListener title='Unpin Thread' enterDelay={350}>\n                                    <StarIcon className={classes.toolbarButton} onClick={onPinned}/>\n                                </Tooltip>\n                            }\n                            {\n                                !post.pinned &&\n                                <Tooltip disableFocusListener title='Pin Thread' enterDelay={350}>\n                                    <StarBorderIcon className={classes.toolbarButton} onClick={onPinned}/>\n                                </Tooltip>\n                            }\n                        </React.Fragment>\n                    }\n\n                    <TagButton postId={post.id} className={classes.toolbarButton}/>\n\n                    <Tooltip disableFocusListener title='View Post @ Shacknews.com' enterDelay={350}>\n                        <a\n                            className={classes.toolbarButton}\n                            target='_blank'\n                            rel=\"noopener noreferrer\"\n                            href={`http://www.shacknews.com/chatty?id=${post.id}#item_${post.id}`}\n                        >\n                            <ExitToAppIcon className={classes.toolbarButton}/>\n                        </a>\n                    </Tooltip>\n                </CardActions>\n            </Card>\n\n            {\n                replyBoxOpenForId === post.id &&\n                <ReplyBox parentId={post.id} onCloseReplyBox={onCloseReplyBox} className={classes.replyBox}/>}\n        </React.Fragment>\n    )\n}\n\nconst styles = {\n    card: {\n        backgroundColor: '#202224',\n        borderRadius: 0,\n        marginBottom: 3\n    },\n    replyBorder: {\n        border: '1px solid #656565'\n    },\n    replyBox: {\n        marginTop: -3\n    },\n    tagNws: {\n        borderLeft: '3px solid red !important'\n    },\n    tagInformative: {\n        borderLeft: '3px solid #00bff3 !important'\n    },\n    tagFrontpage: {\n        borderLeft: '3px solid mediumpurple !important'\n    },\n    content: {\n        maxWidth: 'calc(100vw - 32)',\n        color: 'lightgray',\n        fontSize: 13,\n        padding: '8px 16px'\n    },\n    header: {\n        backgroundColor: '#373a3c',\n        padding: '3px 3px 3px 16px',\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    actions: {\n        height: 34\n    },\n    flex: {\n        flex: 1\n    },\n    toolbarButton: {\n        width: 18,\n        height: 18,\n        cursor: 'pointer',\n        color: '#fff',\n        marginRight: 6\n    },\n    collapsed: {\n        color: '#f00'\n    }\n}\n\nexport default withStyles(styles)(Post)\n","import React, {useMemo} from 'react'\nimport PostAuthor from './PostAuthor'\nimport {withStyles} from '@material-ui/core/styles'\nimport classnames from 'classnames'\nimport Tags from './Tags'\n\nfunction OneLine({classes, post, thread, onExpandReply}) {\n    const getSnippet = body => {\n        const input = body.replace(/(<(?!span)(?!\\/span)[^>]+>| tabindex=\"1\")/gm, ' ')\n        const maxLength = 106\n\n        let i = 0\n        let len = 0\n        let tag = false\n        let char = false\n        while (i < input.length && len < maxLength) {\n            if (input[i] === '<') {\n                tag = true\n            } else if (input[i] === '>') {\n                tag = false\n            } else if (input[i] === '&') {\n                char = true\n            } else if (input[i] === '' && char) {\n                char = false\n                len++\n            } else if (!tag) {\n                len++\n            }\n\n            i++\n        }\n\n        let output = input.slice(0, i).trim()\n        if (i < input.length || !output) {\n            output += '...'\n        }\n\n        return output\n    }\n\n    const lineClass = `oneline${post.recentReplyNumber || 9}`\n    const oneline = useMemo(() => getSnippet(post.body), [post.body])\n\n    return (\n        <div className={classes.container}>\n                <span\n                    className={classnames(classes.oneline, classes[lineClass])}\n                    dangerouslySetInnerHTML={{__html: oneline}}\n                    onClick={() => onExpandReply(post.id)}\n                />\n            <Tags tags={post.lols} variant='oneline'/>\n            <PostAuthor post={post} thread={thread}/>\n        </div>\n    )\n}\n\nconst styles = {\n    container: {\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    separator: {\n        padding: '0 3px',\n        fontSize: 11,\n        color: '#fff'\n    },\n    oneline: {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        '&:hover': {\n            color: '#fff',\n            backgroundColor: '#233548',\n            cursor: 'pointer'\n        }\n    },\n    oneline10: {\n        color: '#777'\n    },\n    oneline9: {\n        color: '#888'\n    },\n    oneline8: {\n        color: '#999'\n    },\n    oneline7: {\n        color: '#aaa'\n    },\n    oneline6: {\n        color: '#bbb'\n    },\n    oneline5: {\n        color: '#ccc'\n    },\n    oneline4: {\n        color: '#ddd'\n    },\n    oneline3: {\n        color: '#eee'\n    },\n    oneline2: {\n        color: '#fff'\n    },\n    oneline1: {\n        color: '#eee',\n        fontWeight: 'bold'\n    }\n}\n\nexport default withStyles(styles)(OneLine)\n","import React, {useContext} from 'react'\nimport Post from './Post'\nimport OneLine from './OneLine'\nimport FilterContext from '../context/filter/FilterContext'\n\nfunction Comments({thread = {}, parent = thread, onCollapseReply, onExpandReply, onOpenReplyBox, expandedReplyId, replyBoxOpenForId, onCloseReplyBox}) {\n    const {isPostVisible} = useContext(FilterContext)\n    return (\n        <ul className='comments'>\n            {\n                thread.posts\n                    .filter(post => post.parentId === parent.id)\n                    .filter(post => isPostVisible(thread, post))\n                    .map(post =>\n                        <li key={post.id}>\n                            {\n                                expandedReplyId === post.id\n                                    ? <Post\n                                        post={post}\n                                        thread={thread}\n                                        onCollapse={onCollapseReply}\n                                        replyBoxOpenForId={replyBoxOpenForId}\n                                        onOpenReplyBox={onOpenReplyBox}\n                                        onCloseReplyBox={onCloseReplyBox}\n                                    />\n                                    : <OneLine\n                                        post={post}\n                                        thread={thread}\n                                        onExpandReply={onExpandReply}\n                                    />\n                            }\n                            <Comments\n                                thread={thread}\n                                parent={post}\n                                expandedReplyId={expandedReplyId}\n                                replyBoxOpenForId={replyBoxOpenForId}\n                                onExpandReply={onExpandReply}\n                                onCollapseReply={onCollapseReply}\n                                onOpenReplyBox={onOpenReplyBox}\n                                onCloseReplyBox={onCloseReplyBox}\n                            />\n                        </li>\n                    )\n            }\n        </ul>\n    )\n}\n\nexport default Comments\n","import React, {useContext, useMemo, useState} from 'react'\nimport Post from './Post'\nimport Comments from './Comments'\nimport {withStyles} from '@material-ui/core/styles'\nimport ChattyContext from '../context/chatty/ChattyContext'\nimport FilterContext from '../context/filter/FilterContext'\n\nfunction Thread({classes, thread: rawThread}) {\n    const [expandedReplyId, setExpandedReplyId] = useState(null)\n    const [replyBoxOpenForId, setReplyBoxOpenForId] = useState(null)\n    const {markThread} = useContext(ChattyContext)\n    const {isPostVisible} = useContext(FilterContext)\n    const thread = useMemo(() => {\n        const posts = rawThread.posts ? rawThread.posts.sort((a, b) => a.id - b.id) : []\n\n        // oneline highlights\n        posts.slice(-10)\n            .reverse()\n            .forEach((post, index) => post.recentReplyNumber = index + 1)\n\n        const [post] = posts\n        return {\n            ...rawThread,\n            ...post,\n            id: +rawThread.threadId,\n            posts: posts\n        }\n    }, [rawThread])\n    if (!isPostVisible(rawThread)) return null\n\n    const handleExpandReply = expandedReplyId => {\n        setExpandedReplyId(expandedReplyId)\n        setReplyBoxOpenForId(null)\n    }\n    const handleCollapseReply = () => {\n        setExpandedReplyId(null)\n        setReplyBoxOpenForId(null)\n    }\n    const handleOpenReplyBox = id => setReplyBoxOpenForId(id)\n    const handleCloseReplyBox = () => setReplyBoxOpenForId(null)\n\n    const handleCollapse = () => markThread(thread.threadId, thread.collapsed ? 'unmarked' : 'collapsed')\n    const togglePinned = () => markThread(thread.threadId, thread.pinned ? 'unmarked' : 'pinned')\n\n    return (\n        <div className={classes.thread}>\n            <Post\n                post={thread}\n                thread={thread}\n                replyBoxOpenForId={replyBoxOpenForId}\n                onCollapse={handleCollapse}\n                onOpenReplyBox={handleOpenReplyBox}\n                onCloseReplyBox={handleCloseReplyBox}\n                onPinned={togglePinned}\n            />\n\n            <Comments\n                thread={thread}\n                expandedReplyId={expandedReplyId}\n                replyBoxOpenForId={replyBoxOpenForId}\n                onExpandReply={handleExpandReply}\n                onCollapseReply={handleCollapseReply}\n                onOpenReplyBox={handleOpenReplyBox}\n                onCloseReplyBox={handleCloseReplyBox}\n            />\n        </div>\n    )\n}\n\nconst styles = {\n    thread: {\n        marginBottom: 15\n    }\n}\n\nexport default withStyles(styles)(Thread)\n","import React, {useContext} from 'react'\nimport Thread from '../thread/Thread'\nimport ChattyContext from '../context/chatty/ChattyContext'\n\nfunction Chatty() {\n    const {threads} = useContext(ChattyContext)\n    return (\n        <div style={styles.chatty}>\n            {threads.map(thread => <Thread key={thread.threadId} thread={thread}/>)}\n        </div>\n    )\n}\n\nconst styles = {\n    chatty: {\n        margin: '72px 8px 8px 8px',\n        font: '12px/1.5 arial, helvetica, clean, sans-serif'\n    }\n}\n\nexport default Chatty\n","import React from 'react'\nimport {Route, Switch} from 'react-router-dom'\nimport Nav from '../nav/Nav'\nimport Chatty from '../chatty/Chatty'\n\nfunction App() {\n    return (\n        <React.Fragment>\n            <Nav/>\n            <Switch>\n                <Route path=\"/chatty\" component={Chatty}/>\n\n                <Route component={Chatty}/>\n            </Switch>\n        </React.Fragment>\n    )\n}\n\nexport default App\n","import React, {useContext, useState} from 'react'\nimport AuthContext from './AuthContext'\nimport fetchJson from '../../util/fetchJson'\nimport IndicatorContext from '../indicators/IndicatorContext'\n\nfunction AuthProvider({children}) {\n    const {setLoading} = useContext(IndicatorContext)\n    const [credentials, setCredentials] = useState(() => {\n        try {\n            const storageValue = localStorage.getItem('auth') || '{}'\n            const {username, password} = JSON.parse(storageValue) || {}\n            return {username, password}\n        } catch (ex) {\n            console.log('Invalid storage value: auth', ex)\n            localStorage.removeItem('auth')\n            return {username: null, password: null}\n        }\n    })\n\n    const login = async (username, password) => {\n        try {\n            setLoading('async')\n\n            const result = await fetchJson(`verifyCredentials`, {method: 'POST', body: {username, password}})\n\n            if (result.isValid) {\n                localStorage.setItem('auth', JSON.stringify({username, password}))\n                setCredentials({username, password})\n            } else {\n                console.log('Invalid login credentials.')\n                // TODO: toast user\n            }\n        } catch (ex) {\n            console.log('Error while logging in', ex)\n            // TODO: toast user\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    const logout = () => {\n        localStorage.removeItem('auth')\n        setCredentials({username: null, password: null})\n    }\n\n    const isLoggedIn = credentials.username && credentials.password\n    const contextValue = {...credentials, isLoggedIn, login, logout}\n\n    return (\n        <AuthContext.Provider value={contextValue}>\n            {children}\n        </AuthContext.Provider>\n    )\n}\n\nexport default AuthProvider\n","import React, {useContext, useEffect, useState} from 'react'\nimport ChattyContext from './ChattyContext'\nimport fetchJson from '../../util/fetchJson'\nimport AuthContext from '../auth/AuthContext'\nimport IndicatorContext from '../indicators/IndicatorContext'\n\nfunction ChattyProvider({children}) {\n    let mounted = true\n    const {isLoggedIn, username} = useContext(AuthContext)\n    const {setLoading} = useContext(IndicatorContext)\n\n    const [chatty, setChatty] = useState({threads: [], newThreads: []})\n\n    const [events, setEvents] = useState([])\n    const [lastEventId, setLastEventId] = useState(null)\n\n    const updateThreads = async (freshThreads = false, freshMarkedPosts = false, includeNewThreads = false) => {\n        // fresh chatty load from server\n        let {threads: nextThreads} = freshThreads ? await getChatty() : {}\n\n        // process marked posts if needed\n        let markedPosts\n        if (freshMarkedPosts) markedPosts = await getMarkedPosts(freshMarkedPosts)\n\n        // compile new thread state\n        nextThreads = nextThreads || chatty.threads\n\n        // only add in new threads when needed\n        nextThreads = includeNewThreads ? chatty.newThreads.concat(nextThreads) : nextThreads\n        let nextNewThreads = includeNewThreads ? [] : chatty.newThreads\n\n        // if we're loading marked posts, process the data\n        if (markedPosts) {\n            const markedPostsById = markedPosts\n                .reduce((acc, post) => ({\n                    ...acc,\n                    [post.id]: post.type\n                }), {})\n\n            // update post markings\n            nextThreads = nextThreads\n                .map(thread => ({\n                    ...thread,\n                    pinned: markedPostsById[thread.threadId] === 'pinned',\n                    collapsed: markedPostsById[thread.threadId] === 'collapsed'\n                }))\n        }\n\n        // order by recent activity\n        let maxPostIdByThread = nextThreads\n            .reduce((acc, thread) => {\n                acc[thread.threadId] = thread.posts.reduce((acc, post) => Math.max(post.id, acc), 0)\n                return acc\n            }, {})\n\n        // TODO: remove expired threads\n\n        // sort by activity, pinned first\n        nextThreads = nextThreads\n            .sort((a, b) => maxPostIdByThread[b.threadId] - maxPostIdByThread[a.threadId])\n            .sort((a, b) => b.pinned - a.pinned)\n\n        setChatty({\n            threads: nextThreads,\n            newThreads: nextNewThreads\n        })\n\n        if (markedPosts) {\n            // clean up any old collapsed posts after loading, doesn't impact state\n            let promises = markedPosts\n                .filter(post => !maxPostIdByThread[post.id])\n                .map(({id}) => markThread(id, 'unmarked', false))\n            await Promise.all(promises)\n        }\n    }\n\n    const fullReload = async () => {\n        try {\n            setLoading('async')\n\n            const {eventId} = await fetchJson('getNewestEventId')\n            await updateThreads(true, true, false)\n            setLastEventId(eventId)\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    const waitForEvent = async () => {\n        if (mounted && lastEventId) {\n            const {lastEventId: newerEventId, events, error} = await fetchJson(`waitForEvent?lastEventId=${lastEventId}`)\n\n            if (mounted) {\n                if (!error) {\n                    setEvents(events)\n                    setLastEventId(newerEventId)\n                } else {\n                    // TODO: handle eventing error, probably need to restart events / reload chatty\n                    console.log('Error from API:waitForLastEvent call.', error)\n                }\n            }\n        }\n    }\n\n    const getMarkedPosts = async () => {\n        if (isLoggedIn) {\n            const {markedPosts} = await fetchJson(`clientData/getMarkedPosts?username=${encodeURIComponent(username)}`)\n            return markedPosts\n        }\n        return []\n    }\n\n    const getChatty = async threadCount => {\n        return await fetchJson(`getChatty${threadCount > 0 ? `?count=${threadCount}` : ''}`)\n    }\n\n    const handleEvent = async (event = {}) => {\n        const {eventType, eventData} = event\n\n        if (eventType === 'newPost') {\n            const {post} = eventData\n            if (post.parentId) {\n                const threadId = `${post.threadId}`\n                const addReply = thread => {\n                    if (thread.threadId === threadId) {\n                        return {\n                            ...thread,\n                            posts: [\n                                ...thread.posts,\n                                post\n                            ]\n                        }\n                    }\n                    return thread\n                }\n\n                setChatty({\n                    threads: chatty.threads.map(addReply),\n                    newThreads: chatty.newThreads.map(addReply)\n                })\n            } else {\n                setChatty({\n                    threads: chatty.threads,\n                    newThreads: [\n                        ...chatty.newThreads,\n                        {\n                            threadId: `${post.id}`,\n                            posts: [\n                                post\n                            ]\n                        }\n                    ]\n                })\n            }\n        } else if (eventType === 'categoryChange') {\n            const {postId, category} = eventData\n            const updateCategory = thread => {\n                const threadContainsUpdate = thread.posts.find(post => post.id === postId)\n                if (threadContainsUpdate) {\n                    const posts = thread.posts\n                        .map(post => {\n                            if (post.id === postId) {\n                                return {...post, category}\n                            }\n                            return post\n                        })\n                    return {...thread, posts}\n                }\n                return thread\n            }\n\n            setChatty({\n                threads: chatty.threads.map(updateCategory),\n                newThreads: chatty.newThreads.map(updateCategory)\n            })\n        } else if (eventType === 'lolCountsUpdate') {\n            const {updates} = eventData\n            const updatedPostsById = updates\n                .reduce(((acc, {postId, tag, count}) => ({\n                    ...acc,\n                    [postId]: {tag, count}\n                })), {})\n            const updateTags = thread => {\n                const threadContainsUpdate = thread.posts.find(post => updatedPostsById[post.id])\n                if (threadContainsUpdate) {\n                    const posts = thread.posts\n                        .map(post => {\n                            const updated = updatedPostsById[post.id]\n                            if (updated) {\n                                const lols = (post.lols || [])\n                                    .filter(tag => tag.tag !== updated.tag)\n                                    .concat([updated])\n                                return {...post, lols}\n                            }\n                            return post\n                        })\n                    return {...thread, posts}\n                }\n                return thread\n            }\n\n            setChatty({\n                threads: chatty.threads.map(updateTags),\n                newThreads: chatty.newThreads.map(updateTags)\n            })\n        } else {\n            console.debug('Unhandled event type:', event)\n        }\n    }\n\n    const refreshChatty = async () => {\n        await updateThreads(false, false, true)\n        window.scrollTo(0, 0)\n    }\n\n    const markThread = async (postId, type, updateThreads = true) => {\n        if (isLoggedIn) {\n            await fetchJson('clientData/markPost', {\n                method: 'POST',\n                body: {username, postId, type}\n            })\n        }\n\n        if (updateThreads) {\n            const threadId = `${postId}`\n            setChatty({\n                threads: chatty.threads\n                    .map(thread => {\n                        if (thread.threadId === threadId) {\n                            return {\n                                ...thread,\n                                pinned: type === 'pinned',\n                                collapsed: type === 'collapsed'\n                            }\n                        }\n                        return thread\n                    }),\n                newThreads: chatty.newThreads\n            })\n        }\n    }\n\n    // full load of chatty on start\n    useEffect(() => {\n        fullReload()\n        return () => mounted = false\n    }, [isLoggedIn])\n\n    // wait for events\n    useEffect(() => {\n        waitForEvent(lastEventId)\n    }, [lastEventId])\n\n    // handle events\n    useEffect(() => {\n        events.forEach(event => handleEvent(event))\n    }, [events])\n\n    const contextValue = {\n        ...chatty,\n        refreshChatty,\n        markThread\n    }\n\n    return (\n        <ChattyContext.Provider value={contextValue}>\n            {children}\n        </ChattyContext.Provider>\n    )\n}\n\nexport default ChattyProvider\n","import React from 'react'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {withStyles} from '@material-ui/core/styles'\n\nfunction AsyncLoadingIndicator({classes, loading}) {\n    if (loading !== 'async') return null\n    return <LinearProgress className={classes.progress} color='secondary'/>\n}\n\nconst styles = {\n    progress: {\n        zIndex: 9999,\n        position: 'fixed',\n        top: 0,\n        width: '100vw'\n    }\n}\n\nexport default withStyles(styles)(AsyncLoadingIndicator)\n","import React, {useState} from 'react'\nimport IndicatorContext from './IndicatorContext'\nimport AsyncLoadingIndicator from './AsyncLoadingIndicator'\n\nfunction IndicatorProvider({children}) {\n    const [loading, setLoading] = useState(false)\n\n    const showToast = msg => {\n        // TODO: hook to toasts and replace other TODOs\n    }\n\n    const contextValue = {\n        setLoading,\n        showToast\n    }\n\n    return (\n        <IndicatorContext.Provider value={contextValue}>\n            <AsyncLoadingIndicator loading={loading}/>\n            {children}\n        </IndicatorContext.Provider>\n    )\n}\n\nexport default IndicatorProvider\n","import React, {useState} from 'react'\nimport FilterContext from './FilterContext'\n\nfunction FilterProvider({children}) {\n    const [filterSettings, setFilterSettings] = useState({\n        showCollapsed: false,\n        showFilteredUsers: false,\n        filteredUsers: [],\n        showFilteredTerms: false,\n        filteredTerms: []\n    })\n\n    const isPostVisible = (thread, post = thread) => {\n        const {\n            showCollapsed,\n            showFilteredUsers, filteredUsers,\n            showFilteredTerms, filteredTerms\n        } = filterSettings\n\n        if (!showCollapsed && thread.collapsed) return false\n        else if (!showFilteredUsers && filteredUsers.some(({regex}) => regex.test(post.author))) return false\n        else if (!showFilteredTerms && filteredTerms.some(({regex}) => regex.test(post.body))) return false\n\n        return true\n    }\n\n    const contextValue = {\n        filterSettings,\n        setFilterSettings,\n        isPostVisible\n    }\n\n    return (\n        <FilterContext.Provider value={contextValue}>\n            {children}\n        </FilterContext.Provider>\n    )\n}\n\nexport default FilterProvider\n","import createHistory from 'history/createBrowserHistory'\nconst history = createHistory({})\nexport default history\n","import React from 'react'\nimport {MuiThemeProvider} from '@material-ui/core/styles'\nimport Theme from './Theme'\nimport App from './App'\nimport AuthProvider from '../context/auth/AuthProvider'\nimport ChattyProvider from '../context/chatty/ChattyProvider'\nimport './global.css'\nimport './shacktags.css'\nimport './comment_tree.css'\nimport IndicatorProvider from '../context/indicators/IndicatorProvider'\nimport FilterProvider from '../context/filter/FilterProvider'\nimport {Router} from 'react-router-dom'\nimport history from '../history'\n\nfunction Root() {\n    return (\n        <Router history={history}>\n            <MuiThemeProvider theme={Theme}>\n                <IndicatorProvider>\n                    <AuthProvider>\n                        <ChattyProvider>\n                            <FilterProvider>\n                                <App/>\n                            </FilterProvider>\n                        </ChattyProvider>\n                    </AuthProvider>\n                </IndicatorProvider>\n            </MuiThemeProvider>\n        </Router>\n    )\n}\n\nexport default Root\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Root from './app/Root'\n\nconst render = Component => ReactDOM.render(<Component/>, document.getElementById('root'))\n\nrender(Root)\n\nif (module.hot) {\n    module.hot.accept('./app/Root', () => {\n        const next = require('./app/Root').default\n        render(next)\n    })\n}\n"],"sourceRoot":""}