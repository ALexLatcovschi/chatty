{"version":3,"sources":["installStyle.js","app/Theme.js","context/auth/AuthContext.js","auth/LoginDialog.js","auth/LoginButton.js","auth/LogoutButton.js","userMenu/UserMenu.js","context/chatty/ChattyContext.js","nav/RefreshButton.js","util/fetchJson.js","context/indicators/IndicatorContext.js","replyBox/ReplyBox.js","nav/NewThreadButton.js","nav/MessagesButton.js","context/filter/FilterContext.js","filter/FilterDialog.js","filter/FilterButton.js","nav/Nav.js","thread/PostExpirationBar.js","thread/PostDate.js","thread/PostAuthor.js","thread/supportedTags.js","thread/Tags.js","thread/TagButton.js","thread/Post.js","thread/OneLine.js","thread/Comments.js","thread/Thread.js","chatty/Chatty.js","app/App.js","context/auth/AuthProvider.js","context/chatty/ChattyProvider.js","context/indicators/AsyncLoadingIndicator.js","context/indicators/IndicatorProvider.js","context/filter/FilterProvider.js","history.js","app/Root.js","index.js"],"names":["install","createMuiTheme","palette","type","primary","light","main","dark","secondary","typography","useNextVariants","React","createContext","LoginDialog","_ref","open","onClose","_useState","useState","_useState2","Object","slicedToArray","username","setUsername","_useState3","_useState4","password","setPassword","login","useContext","AuthContext","submit","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee","event","wrap","_context","prev","next","preventDefault","stop","this","_x","apply","arguments","react_default","createElement","Dialog_default","onSubmit","DialogTitle_default","DialogContent_default","TextField_default","autoFocus","margin","label","fullWidth","onChange","target","value","DialogActions_default","Button_default","onClick","LoginButton","setOpen","Fragment","auth_LoginDialog","logout","MenuItem_default","UserMenu","_useContext","isLoggedIn","anchorEl","setAnchorEl","IconButton_default","Person_default","core_Menu_default","keepMounted","disabled","Divider_default","LogoutButton","auth_LoginButton","useStyles","makeStyles","badge","top","RefreshButton","classes","ChattyContext","newThreads","refreshChatty","displayBadge","length","title","concat","Tooltip_default","disableFocusListener","enterDelay","Badge_default","badgeContent","color","Refresh_default","fetchJson","url","options","res","body","status","statusText","result","_args","undefined","objectSpread","headers","Content-Type","querystring","stringify","fetch","sent","ok","tryJson","abrupt","console","error","Promise","reject","_callee2","text","_context2","JSON","parse","t0","_x2","card","backgroundColor","borderRadius","border","actions","flexRow","display","flexDirection","textarea","flex","padding","ReplyBox","onCloseReplyBox","parentId","className","setLoading","IndicatorContext","setText","posting","setPosting","handleSubmit","method","log","finish","Card_default","classnames","CardHeader_default","CardContent_default","Input_default","multiline","disableUnderline","rows","placeholder","name","required","CardActions_default","variant","dialogPaper","width","NewThreadButton","Add_default","paper","replyBox_ReplyBox","MessagesButton","totalMessagesCount","setTotalMessagesCount","unreadMessagesCount","setUnreadMessagesCount","getCounts","total","unread","useEffect","id","setInterval","clearInterval","href","Message_default","content","FilterDialog","FilterContext","filterSettings","setFilterSettings","showCollapsed","setShowCollapsed","FormControlLabel_default","control","Checkbox_default","checked","FilterButton","Tooltip_Tooltip_default","IconButton_IconButton_default","FilterList_default","filter_FilterDialog","white","menuButton","marginLeft","marginRight","menuItem","textDecoration","Nav","drawerOpen","setDrawerOpen","closeDrawer","AppBar_default","elevation","Toolbar_default","Menu_default","Typography_default","filter_FilterButton","nav_NewThreadButton","nav_MessagesButton","nav_RefreshButton","userMenu_UserMenu","Drawer_default","drawer","position","drawerAppBar","rel","wrapper","height","background","backgroundImage","backgroundSize","boxShadow","PostExpirationBar","date","now","Date","getTime","then","percent","Math","min","style","fontSize","paddingTop","PostDate","format","distanceInWordsToNow","employees","mods","user","fontWeight","cursor","&:hover","normal","self","op","mod","employee","PostAuthor","_ref$post","post","_ref$thread","thread","_post$author","author","isSameUser","one","two","toLowerCase","replace","userClass","useMemo","find","nonBreakingAuthor","String","fromCharCode","supportedTags","containerPost","containerOneline","whiteSpace","chip","marginTop","nonChip","lolBorder","infBorder","unfBorder","wtfBorder","tagBorder","lol","inf","unf","wtf","tag","Tags","_ref$tags","tags","fixedTags","validTags","filter","includes","miscTagCount","reduce","acc","count","toConsumableArray","map","Chip_default","key","TagButton","postId","toUpperCase","handleTag","tagPost","match","warn","_ref3","who","what","action","params","response","version","_x3","_x4","_x5","Label_default","marginBottom","replyBorder","replyBox","tagNws","borderLeft","tagInformative","tagFrontpage","maxWidth","header","toolbarButton","collapsed","Post","onCollapse","onPinned","replyBoxOpenForId","onOpenReplyBox","isPostVisible","html","fixed","__html","tagClass","category","test","thread_PostAuthor","thread_Tags","lols","thread_PostDate","thread_PostExpirationBar","dangerouslySetInnerHTML","disableActionSpacing","Close_default","Reply_default","pinned","Star_default","StarBorder_default","thread_TagButton","ExitToApp_default","container","separator","oneline","overflow","textOverflow","oneline10","oneline9","oneline8","oneline7","oneline6","oneline5","oneline4","oneline3","oneline2","oneline1","OneLine","onExpandReply","lineClass","recentReplyNumber","input","i","len","char","output","slice","trim","getSnippet","Comments","_ref$parent","parent","onCollapseReply","expandedReplyId","posts","thread_Post","thread_OneLine","Thread","rawThread","setExpandedReplyId","setReplyBoxOpenForId","markThread","sort","b","reverse","forEach","index","threadId","handleOpenReplyBox","handleCloseReplyBox","thread_Comments","chatty","font","Chatty","threads","thread_Thread","App","nav_Nav","Switch","Route","path","component","AuthProvider","children","storageValue","localStorage","getItem","ex","removeItem","credentials","setCredentials","isValid","setItem","contextValue","Provider","ChattyProvider","mounted","setChatty","events","setEvents","_useState5","_useState6","lastEventId","setLastEventId","updateThreads","freshThreads","freshMarkedPosts","includeNewThreads","nextThreads","markedPosts","nextNewThreads","markedPostsById","maxPostIdByThread","promises","getChatty","getMarkedPosts","defineProperty","max","_ref4","all","fullReload","_ref5","_ref6","eventId","waitForEvent","_ref7","_callee3","_ref8","newerEventId","_events","_context3","_ref9","_callee4","_ref10","_context4","encodeURIComponent","_ref11","_callee5","threadCount","_context5","handleEvent","_ref12","_callee6","eventType","eventData","addReply","updateCategory","updates","updatedPostsById","updateTags","_args6","_context6","_ref13","updated","debug","_ref14","_callee7","_context7","window","scrollTo","_ref15","_callee8","_args8","_context8","progress","zIndex","AsyncLoadingIndicator","loading","LinearProgress_default","IndicatorProvider","showToast","msg","indicators_AsyncLoadingIndicator","FilterProvider","showFilteredUsers","filteredUsers","showFilteredTerms","filteredTerms","some","regex","history","createHistory","Root","Component","Router","index_es","theme","Theme","indicators_IndicatorProvider","auth_AuthProvider","chatty_ChattyProvider","filter_FilterProvider","app_App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b02153c8.chunk.js","sourcesContent":["import {install} from '@material-ui/styles'\n\n// This is necessary to import first before MUI components, otherwise the styling will not work as expected.\n// See: https://material-ui.com/css-in-js/basics/#migration-for-material-ui-core-users\ninstall()\n","import createMuiTheme from '@material-ui/core/styles/createMuiTheme'\n\nexport default createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            light: '#6fbf73',\n            main: '#357a38',\n            dark: '#357a38'\n        },\n        secondary: {\n            light: '#33eaff',\n            main: '#00e5ff',\n            dark: '#00a0b2'\n        }\n    },\n    typography: {\n        useNextVariants: true\n    }\n})\n","import React from 'react'\n\nexport default React.createContext({})\n","import React, {useContext, useState} from 'react'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport AuthContext from '../context/auth/AuthContext'\n\nfunction LoginDialog({open, onClose}) {\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const {login} = useContext(AuthContext)\n\n    const submit = async event => {\n        event.preventDefault()\n\n        // TODO: Sync loading indicator\n        login(username, password)\n\n        setUsername('')\n        setPassword('')\n        onClose()\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose}>\n            <form onSubmit={submit}>\n                <DialogTitle>Log in</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        autoFocus\n                        margin='dense'\n                        label='Username'\n                        type='text'\n                        fullWidth\n                        onChange={event => setUsername(event.target.value)}\n                    />\n                    <TextField\n                        margin='dense'\n                        label='Password'\n                        type='password'\n                        fullWidth\n                        onChange={event => setPassword(event.target.value)}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={onClose}>Cancel</Button>\n                    <Button type='submit'>Log in</Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    )\n}\n\nexport default LoginDialog\n","import React, {useState} from 'react'\nimport Button from '@material-ui/core/Button'\nimport LoginDialog from './LoginDialog'\n\nfunction LoginButton() {\n    const [open, setOpen] = useState(false)\n    return (\n        <React.Fragment>\n            <Button onClick={() => setOpen(true)}>Log in</Button>\n\n            <LoginDialog open={open} onClose={() => setOpen(false)}/>\n        </React.Fragment>\n    )\n}\n\nexport default LoginButton\n","import React, {useContext} from 'react'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport AuthContext from '../context/auth/AuthContext'\n\nfunction LoginButton({onClick}) {\n    const {logout} = useContext(AuthContext)\n    const handleClick = () => {\n        onClick && onClick()\n        logout()\n    }\n    return <MenuItem onClick={handleClick}>Logout</MenuItem>\n}\n\nexport default LoginButton\n","import React, {useContext, useState} from 'react'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport LoginButton from '../auth/LoginButton'\nimport LogoutButton from '../auth/LogoutButton'\nimport IconButton from '@material-ui/core/IconButton'\nimport Divider from '@material-ui/core/Divider'\nimport PersonIcon from '@material-ui/icons/Person'\nimport AuthContext from '../context/auth/AuthContext'\n\nfunction UserMenu() {\n    const {isLoggedIn, username} = useContext(AuthContext)\n    const [anchorEl, setAnchorEl] = useState(null)\n\n    if (!isLoggedIn) return <LoginButton/>\n    return (\n        <React.Fragment>\n            <IconButton onClick={event => setAnchorEl(event.target)}>\n                <PersonIcon/>\n            </IconButton>\n\n            {anchorEl && <Menu\n                keepMounted\n                open={!!anchorEl}\n                anchorEl={anchorEl}\n                onClose={() => setAnchorEl(null)}\n            >\n                <MenuItem disabled>{username}</MenuItem>\n                <Divider/>\n                <LogoutButton onClick={() => setAnchorEl(null)}/>\n            </Menu>}\n        </React.Fragment>\n    )\n}\n\nexport default UserMenu\n","import React from 'react'\n\nexport default React.createContext({})\n","import React, {useContext} from 'react'\nimport IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport RefreshIcon from '@material-ui/icons/Refresh'\nimport Badge from '@material-ui/core/Badge'\nimport ChattyContext from '../context/chatty/ChattyContext'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction RefreshButton() {\n    const classes = useStyles()\n    const {newThreads, refreshChatty} = useContext(ChattyContext)\n    const displayBadge = newThreads && newThreads.length > 0\n    const title = displayBadge ? `Refresh Thread Order (${newThreads.length} new threads)` : 'Refresh Thread Order'\n\n    return (\n        <Tooltip disableFocusListener title={title} enterDelay={350}>\n            <IconButton onClick={refreshChatty}>\n                {\n                    displayBadge ?\n                        <Badge badgeContent={newThreads.length} color='secondary' classes={{badge: classes.badge}}>\n                            <RefreshIcon/>\n                        </Badge>\n                        : <RefreshIcon/>\n                }\n            </IconButton>\n        </Tooltip>\n    )\n}\n\nconst useStyles = makeStyles({\n    badge: {\n        top: 12\n    }\n})\n\nexport default RefreshButton\n","import querystring from 'querystring'\n\nconst base = 'https://winchatty.com/v2'\n\nexport default async (url, options = {}) => {\n    if (options.body) {\n        options = {\n            ...options,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...options.headers\n            },\n            body: querystring.stringify(options.body)\n        }\n    }\n    let res = await fetch(`${base}/${url}`, options)\n    if (res.ok) {\n        return await tryJson(res)\n    } else {\n        let body = await tryJson(res)\n        let {status, statusText} = res\n        let result = {status, statusText, body}\n        console.error('Http Error:', result)\n        return Promise.reject(result)\n    }\n}\n\nconst tryJson = async res => {\n    let text = await res.text()\n    try {\n        return JSON.parse(text)\n    } catch (ex) {\n        return text\n    }\n}\n","import React from 'react'\n\nexport default React.createContext({})\n","import React, {useContext, useState} from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Button from '@material-ui/core/Button'\nimport Input from '@material-ui/core/Input'\nimport fetchJson from '../util/fetchJson'\nimport classnames from 'classnames'\nimport AuthContext from '../context/auth/AuthContext'\nimport IndicatorContext from '../context/indicators/IndicatorContext'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction ReplyBox({onCloseReplyBox, parentId, className}) {\n    const classes = useStyles()\n    const {username, password} = useContext(AuthContext)\n    const {setLoading} = useContext(IndicatorContext)\n    const [text, setText] = useState('')\n    const [posting, setPosting] = useState(false)\n\n    const handleSubmit = async () => {\n        try {\n            setLoading('async')\n            setPosting(true)\n            let response = await fetchJson('postComment', {method: 'POST', body: {username, password, parentId, text}})\n            if (response.result === 'success') {\n                onCloseReplyBox()\n                // TODO: toast user\n            }\n        } catch (ex) {\n            console.log('Error while posting comment', ex)\n            // TODO: toast user\n        } finally {\n            setPosting(true)\n            setLoading(false)\n        }\n    }\n\n    return (\n        <Card className={classnames(className, classes.card)}>\n            {parentId === 0 && <CardHeader title='New Thread'/>}\n            <CardContent>\n                <div className={classes.flexRow}>\n                    <Input\n                        multiline\n                        autoFocus\n                        disableUnderline\n                        rows={5}\n                        fullWidth\n                        className={classes.textarea}\n                        placeholder='Type something interesting...'\n                        name='replyBody'\n                        required\n                        onChange={event => setText(event.target.value)}\n                    />\n                </div>\n            </CardContent>\n            <CardActions className={classes.actions}>\n                <Button\n                    color='primary'\n                    variant='outlined'\n                    disabled={posting || !text.length}\n                    onClick={handleSubmit}\n                >Post\n                </Button>\n                <Button\n                    variant='outlined'\n                    disabled={posting}\n                    onClick={onCloseReplyBox}\n                >Cancel\n                </Button>\n            </CardActions>\n        </Card>\n    )\n}\n\nconst useStyles = makeStyles({\n    card: {\n        backgroundColor: '#202224',\n        borderRadius: 0,\n        border: '1px solid #656565'\n    },\n    actions: {\n        margin: '-8px 0 8px 8px'\n    },\n    flexRow: {\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    textarea: {\n        flex: 1,\n        backgroundColor: '#000',\n        padding: 4\n    }\n})\n\nexport default ReplyBox\n","import React, {useContext, useState} from 'react'\nimport IconButton from '@material-ui/core/IconButton'\nimport AddIcon from '../../node_modules/@material-ui/icons/Add'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Dialog from '@material-ui/core/Dialog'\nimport ReplyBox from '../replyBox/ReplyBox'\nimport AuthContext from '../context/auth/AuthContext'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction NewThreadButton() {\n    const classes = useStyles()\n    const {isLoggedIn} = useContext(AuthContext)\n    const [open, setOpen] = useState(false)\n    if (!isLoggedIn) return null\n\n    return (\n        <React.Fragment>\n            <Tooltip disableFocusListener title='New Thread' enterDelay={350}>\n                <IconButton onClick={() => setOpen(true)}>\n                    <AddIcon/>\n                </IconButton>\n            </Tooltip>\n            <Dialog\n                open={open}\n                onClose={() => setOpen(false)}\n                classes={{paper: classes.dialogPaper}}\n            >\n                <ReplyBox\n                    parentId={0}\n                    onCloseReplyBox={() => setOpen(false)}\n                />\n            </Dialog>\n        </React.Fragment>\n    )\n}\n\nconst useStyles = makeStyles({\n    dialogPaper: {\n        width: '85vw'\n    }\n})\n\nexport default NewThreadButton\n","import React, {useContext, useEffect, useState} from 'react'\nimport IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport MessageIcon from '@material-ui/icons/Message'\nimport Badge from '@material-ui/core/Badge'\nimport {makeStyles} from '@material-ui/styles'\nimport fetchJson from '../util/fetchJson'\nimport AuthContext from '../context/auth/AuthContext'\n\nfunction MessagesButton() {\n    const classes = useStyles()\n    const {isLoggedIn, username, password} = useContext(AuthContext)\n\n    const [totalMessagesCount, setTotalMessagesCount] = useState(0)\n    const [unreadMessagesCount, setUnreadMessagesCount] = useState(0)\n\n    const displayBadge = unreadMessagesCount > 0\n    const title = `( ${unreadMessagesCount} / ${totalMessagesCount} ) unread messages`\n\n    const getCounts = async () => {\n        if (isLoggedIn) {\n            const options = {method: 'POST', body: {username, password}}\n            const {total, unread} = await fetchJson('getMessageCount', options)\n            setTotalMessagesCount(total)\n            setUnreadMessagesCount(unread)\n        }\n    }\n\n    // update counts every 15 minutes\n    useEffect(() => {\n        getCounts()\n\n        const id = setInterval(() => getCounts(), 15 * 60 * 1000)\n        return () => clearInterval(id)\n    }, [isLoggedIn])\n\n    if (!isLoggedIn) return null\n    return (\n        <Tooltip disableFocusListener title={title} enterDelay={350}>\n            <IconButton href='https://www.shacknews.com/messages' target='_blank'>\n                {\n                    displayBadge\n                        ? <Badge\n                            badgeContent={unreadMessagesCount}\n                            color='secondary'\n                            classes={{badge: classes.badge}}\n                        >\n                            <MessageIcon/>\n                        </Badge>\n                        : <MessageIcon/>\n                }\n            </IconButton>\n        </Tooltip>\n    )\n}\n\nconst useStyles = makeStyles({\n    badge: {\n        top: 12\n    }\n})\n\nexport default MessagesButton\n","import React from 'react'\n\nexport default React.createContext({})\n","import React, {useContext, useState} from 'react'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Dialog from '@material-ui/core/Dialog'\nimport Button from '@material-ui/core/Button'\nimport FilterContext from '../context/filter/FilterContext'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction FilterDialog({open, onClose}) {\n    const classes = useStyles()\n    const {filterSettings, setFilterSettings} = useContext(FilterContext)\n    const [showCollapsed, setShowCollapsed] = useState(filterSettings.showCollapsed)\n\n    const handleSave = () => {\n        onClose()\n        setFilterSettings({\n            showCollapsed\n        })\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose}>\n            <DialogTitle>Filter Threads/Posts</DialogTitle>\n            <DialogContent className={classes.content}>\n                <FormControlLabel\n                    label='Show Collapsed Threads'\n                    control={\n                        <Checkbox\n                            checked={showCollapsed}\n                            onChange={() => setShowCollapsed(!showCollapsed)}\n                            value='showCollapsed'\n                        />\n                    }\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose}>Cancel</Button>\n                <Button onClick={handleSave}>Save</Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nconst useStyles = makeStyles({\n    content: {\n        display: 'flex',\n        flexDirection: 'column'\n    }\n})\n\nexport default FilterDialog\n","import React, {useState} from 'react'\nimport IconButton from '@material-ui/core/IconButton/IconButton'\nimport FilterListIcon from '@material-ui/icons/FilterList'\nimport Tooltip from '@material-ui/core/Tooltip/Tooltip'\nimport FilterDialog from './FilterDialog'\n\nfunction FilterButton() {\n    const [open, setOpen] = useState(false)\n    return (\n        <React.Fragment>\n            <Tooltip disableFocusListener title='Filter Threads/Posts' enterDelay={350}>\n                <IconButton onClick={() => setOpen(true)}>\n                    <FilterListIcon/>\n                </IconButton>\n            </Tooltip>\n\n            <FilterDialog open={open} onClose={() => setOpen(false)}/>\n        </React.Fragment>\n    )\n}\n\nexport default FilterButton\n","import React, {useState} from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Typography from '@material-ui/core/Typography'\nimport UserMenu from '../userMenu/UserMenu'\nimport RefreshButton from './RefreshButton'\nimport NewThreadButton from './NewThreadButton'\nimport MessagesButton from './MessagesButton'\nimport FilterButton from '../filter/FilterButton'\nimport Drawer from '@material-ui/core/Drawer'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction Nav() {\n    const classes = useStyles()\n    const [drawerOpen, setDrawerOpen] = useState(false)\n    const closeDrawer = () => setDrawerOpen(false)\n\n    return (\n        <React.Fragment>\n            <AppBar elevation={0}>\n                <Toolbar>\n                    <IconButton className={classes.menuButton} onClick={() => setDrawerOpen(!drawerOpen)}>\n                        <MenuIcon className={classes.white}/>\n                    </IconButton>\n\n                    <Typography variant=\"h5\" className={classes.title}>Chatty</Typography>\n\n                    <FilterButton/>\n                    <NewThreadButton/>\n                    <MessagesButton/>\n                    <RefreshButton/>\n                    <UserMenu/>\n                </Toolbar>\n            </AppBar>\n\n            <Drawer open={drawerOpen} onClose={closeDrawer} className={classes.drawer}>\n                <AppBar position=\"static\" color=\"primary\" className={classes.drawerAppBar}>\n                    <Toolbar>\n                        <Typography variant=\"h6\" className={classes.title}>Latest Chatty</Typography>\n                    </Toolbar>\n                </AppBar>\n\n                <a\n                    href=\"https://github.com/latestchatty/chatty\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className={classes.menuItem}>\n                    <MenuItem onClick={closeDrawer}>Contribute</MenuItem>\n                </a>\n                <a\n                    href=\"https://github.com/latestchatty/chatty/issues\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className={classes.menuItem}>\n                    <MenuItem onClick={closeDrawer}>Feedback</MenuItem>\n                </a>\n            </Drawer>\n        </React.Fragment>\n    )\n}\n\nconst useStyles = makeStyles({\n    white: {\n        color: '#fff'\n    },\n    title: {\n        color: '#fff',\n        flex: 1\n    },\n    menuButton: {\n        marginLeft: -15,\n        marginRight: 8\n    },\n    menuItem: {\n        textDecoration: 'none',\n        color: 'inherit'\n    }\n})\n\nexport default Nav\n","import React from 'react'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction PostExpirationBar({date}) {\n    const classes = useStyles()\n    const now = (new Date().getTime())\n    const then = new Date(date).getTime()\n    const percent = Math.min((((now - then) / 3600000) / 18) * 100, 100)\n\n    let backgroundColor = 'red'\n    if (percent <= 25) {\n        backgroundColor = 'springgreen'\n    } else if (percent <= 50) {\n        backgroundColor = 'yellow'\n    } else if (percent <= 75) {\n        backgroundColor = 'orange'\n    }\n\n    return (\n        <div className={classes.wrapper}>\n            <div\n                className={classes.value}\n                style={{width: `${percent}%`, backgroundColor}}\n            />\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    wrapper: {\n        height: 8,\n        width: 48,\n        margin: 7,\n        background:\n            `rgb(221, 221, 221) -webkit-gradient(\n                linear,\n                0% 0%,\n                0% 100%,\n                from(rgb(170, 170, 170)),\n                color-stop(0.4, rgb(204, 204, 204)),\n                color-stop(0.6, rgb(204, 204, 204)),\n                to(rgb(238, 238, 238))\n            )`\n    },\n    value: {\n        height: 8,\n        backgroundImage:\n            `-webkit-gradient(\n                linear,\n                0 100%,\n                100% 0,\n                color-stop(0.25, rgba(255, 255, 255, 0.4)),\n                color-stop(0.25, transparent),\n                color-stop(0.5, transparent),\n                color-stop(0.5, rgba(255, 255, 255, 0.4)),\n                color-stop(0.75, rgba(255, 255, 255, 0.4)),\n                color-stop(0.75, transparent),\n                to(transparent)\n            )`,\n        backgroundSize: '25px 25px',\n        boxShadow: 'rgba(255, 255, 255, 0.298039) 0 2px 4px inset, rgba(0, 0, 0, 0.4) 0 -2px 3px inset'\n    }\n})\n\nexport default PostExpirationBar\n","import React from 'react'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport format from 'date-fns/format'\nimport distanceInWordsToNow from 'date-fns/distance_in_words_to_now'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction PostDate({date}) {\n    const classes = useStyles()\n    return (\n        <Tooltip disableFocusListener title={format(date, 'MMM DD, YYYY h:mma')} enterDelay={350}>\n            <div className={classes.date}>{distanceInWordsToNow(date)} ago</div>\n        </Tooltip>\n    )\n}\n\nconst useStyles = makeStyles({\n    date: {\n        fontSize: 10,\n        color: '#888',\n        paddingTop: 3,\n        marginRight: 3\n    }\n})\n\nexport default PostDate\n","import React, {useContext, useMemo} from 'react'\nimport classnames from 'classnames'\nimport AuthContext from '../context/auth/AuthContext'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction PostAuthor({post = {}, thread = {}}) {\n    const classes = useStyles()\n    const {username} = useContext(AuthContext)\n    const {author = ''} = post\n\n    const isSameUser = (one = '', two = '') => {\n        const left = one.toLowerCase().replace(/\\s/g, '')\n        const right = two.toLowerCase().replace(/\\s/g, '')\n        return left === right\n    }\n\n    const userClass = useMemo(() => {\n        if (username && isSameUser(author, username)) return 'self'\n        else if (thread.id !== post.id && isSameUser(thread.author, author)) return 'op'\n        else if (employees.find(employee => isSameUser(employee, author))) return 'employee'\n        else if (mods.find(mod => isSameUser(mod, author))) return 'mod'\n        return 'normal'\n    }, [username, author, thread.id, post.id, thread.author])\n\n    // Don't let the browser line break in the middle of author name\n    const nonBreakingAuthor = useMemo(() => author.replace(/\\s/g, String.fromCharCode(160)), [author])\n\n    return (\n        <span className={classnames(classes.user, classes[userClass])}>\n            {nonBreakingAuthor}\n        </span>\n    )\n}\n\nconst employees = [\n    'themanwiththebriefcase',\n    'shacknews'\n]\nconst mods = []\n\nconst useStyles = makeStyles({\n    user: {\n        fontSize: 14,\n        fontWeight: 'bold',\n        cursor: 'pointer',\n        '&:hover': {\n            textDecoration: 'underline'\n        }\n    },\n    normal: {\n        color: '#f3e7b5'\n    },\n    self: {\n        color: '#6cf'\n    },\n    op: {\n        color: '#6aff94'\n    },\n    mod: {\n        color: '#d20000'\n    },\n    employee: {\n        color: '#9370db'\n    }\n})\n\nexport default PostAuthor\n","export default ['lol', 'inf', 'unf', 'wtf']\n","import React, {useMemo} from 'react'\nimport Chip from '@material-ui/core/Chip'\nimport classnames from 'classnames'\nimport supportedTags from './supportedTags'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction Tags({tags = [], variant}) {\n    const classes = useStyles()\n    const fixedTags = useMemo(() => {\n        const validTags = tags.filter(tag => supportedTags.includes(tag.tag))\n        const miscTagCount = tags.filter(tag => !supportedTags.includes(tag.tag))\n            .reduce((acc, tag) => acc + tag.count, 0)\n        return [\n            ...validTags,\n            {tag: 'tag', count: miscTagCount}\n        ]\n    }, [tags])\n\n    return (\n        <div className={variant === 'post' ? classes.containerPost : classes.containerOneline}>\n            {fixedTags.map(tag => {\n                if (tag.count < 1) return null\n                else if (variant === 'post') {\n                    return (\n                        <Chip\n                            key={tag.tag}\n                            className={classnames(classes.chip, classes[tag.tag], classes[`${tag.tag}Border`])}\n                            label={`${tag.count} ${tag.tag}`}\n                            variant='outlined'\n                        />\n                    )\n                } else if (variant === 'oneline') {\n                    return (\n                        <span key={tag.tag} className={classnames(classes.nonChip, classes[tag.tag])}>\n                            {`${tag.count} ${tag.tag}`}\n                        </span>\n                    )\n                }\n                return null\n            })}\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    containerPost: {\n        marginLeft: 12\n    },\n    containerOneline: {\n        marginLeft: 4,\n        whiteSpace: 'nowrap'\n    },\n    chip: {\n        height: 16,\n        marginTop: 2,\n        marginRight: 6,\n        fontSize: 10\n    },\n    nonChip: {\n        marginRight: 4,\n        fontSize: 9\n    },\n    lolBorder: {\n        border: '1px solid #f80'\n    },\n    infBorder: {\n        border: '1px solid #09c'\n    },\n    unfBorder: {\n        border: '1px solid #f00'\n    },\n    wtfBorder: {\n        border: '1px solid #c000c0'\n    },\n    tagBorder: {\n        border: '1px solid #bbaf57'\n    },\n    lol: {\n        color: '#f80'\n    },\n    inf: {\n        color: '#09c'\n    },\n    unf: {\n        color: '#f00'\n    },\n    wtf: {\n        color: '#c000c0'\n    },\n    tag: {\n        color: '#bbaf57'\n    }\n})\n\nexport default Tags\n","import React, {useContext, useState} from 'react'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport LabelIcon from '@material-ui/icons/Label'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport querystring from 'querystring'\nimport AuthContext from '../context/auth/AuthContext'\nimport supportedTags from './supportedTags'\nimport IndicatorContext from '../context/indicators/IndicatorContext'\n\nfunction TagButton({className, postId}) {\n    const {isLoggedIn, username} = useContext(AuthContext)\n    const {setLoading} = useContext(IndicatorContext)\n    const [anchorEl, setAnchorEl] = useState(null)\n\n    const tags = supportedTags.map(tag => tag.toUpperCase())\n\n    const handleTag = async tag => {\n        try {\n            setLoading('async')\n            setAnchorEl(null)\n\n            let text = await tagPost(username, postId, tag)\n            if (text.includes('already tagged')) {\n                text = await tagPost(username, postId, tag, 'untag')\n            }\n            if (!text.match(/^ok /)) {\n                console.warn('Error tagging post', text)\n            }\n            // TODO: toast user\n        } catch (err) {\n            console.error('Exception while tagging post', err)\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    const tagPost = async (who, what, tag, action) => {\n        const base = 'https://www.lmnopc.com/greasemonkey/shacklol/report.php'\n        const params = querystring.stringify({who, what, tag, version: '-1'})\n        if (action) params.action = action\n        const response = await fetch(`${base}?${params}`)\n        return response.text()\n    }\n\n    if (!isLoggedIn) return null\n    return (\n        <React.Fragment>\n            <Tooltip disableFocusListener title='Tag Post' enterDelay={350}>\n                <LabelIcon className={className} onClick={event => setAnchorEl(event.target)}/>\n            </Tooltip>\n\n            {\n                anchorEl && <Menu\n                    keepMounted\n                    open={!!anchorEl}\n                    anchorEl={anchorEl}\n                    onClose={() => setAnchorEl(null)}\n                >\n                    {tags.map(tag => <MenuItem onClick={() => handleTag(tag)}>{tag}</MenuItem>)}\n                </Menu>\n            }\n        </React.Fragment>\n    )\n}\n\nexport default TagButton\n","import React, {useContext, useMemo} from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport CloseIcon from '@material-ui/icons/Close'\nimport StarIcon from '@material-ui/icons/Star'\nimport StarBorderIcon from '@material-ui/icons/StarBorder'\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp'\nimport ReplyIcon from '@material-ui/icons/Reply'\nimport PostExpirationBar from './PostExpirationBar'\nimport PostDate from './PostDate'\nimport PostAuthor from './PostAuthor'\nimport classnames from 'classnames'\nimport ReplyBox from '../replyBox/ReplyBox'\nimport Tags from './Tags'\nimport TagButton from './TagButton'\nimport AuthContext from '../context/auth/AuthContext'\nimport FilterContext from '../context/filter/FilterContext'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction Post({post, thread, onCollapse, onPinned, replyBoxOpenForId, onOpenReplyBox, onCloseReplyBox}) {\n    const classes = useStyles()\n    const {isLoggedIn} = useContext(AuthContext)\n    const {isPostVisible} = useContext(FilterContext)\n\n    const html = useMemo(() => {\n        let fixed = post.body\n        if (post.author === 'Shacknews') {\n            fixed = post.body.replace('href=\"/', 'href=\"https://www.shacknews.com/')\n        }\n        return {__html: fixed}\n    }, [post.body])\n\n    const tagClass = useMemo(() => {\n        if (post.category === 'nuked') {\n            return null\n        } else if (post.category === 'nws') {\n            return 'tagNws'\n        } else if (post.category === 'informative') {\n            return 'tagInformative'\n        } else if (/shacknews/i.test(post.author)) {\n            return 'tagFrontpage'\n        }\n        return null\n    }, [post.category, post.author])\n\n    const replyBorder = post.parentId > 0 ? 'replyBorder' : null\n\n    const handleReplyClick = () => onOpenReplyBox(post.id)\n\n    if (!isPostVisible(thread, post)) return null\n    return (\n        <React.Fragment>\n            <Card className={classnames(classes.card, classes[tagClass], classes[replyBorder])}>\n                <div className={classes.header}>\n                    <PostAuthor post={post} thread={thread}/>\n\n                    <Tags tags={post.lols} variant='post'/>\n\n                    <span className={classes.flex}/>\n\n                    <PostDate date={post.date}/>\n\n                    {post.parentId === 0 && <PostExpirationBar date={post.date}/>}\n                </div>\n\n                <CardContent className={classnames('postbody', classes.content)}>\n                    <span dangerouslySetInnerHTML={html}/>\n                </CardContent>\n\n                <CardActions className={classes.actions} disableActionSpacing>\n                    <Tooltip\n                        disableFocusListener\n                        title={post.collapsed ? 'Uncollapse' : 'Collapse'}\n                        enterDelay={350}\n                    >\n                        <CloseIcon\n                            className={\n                                classnames(classes.toolbarButton, post.collapsed ? classes.collapsed : null)\n                            }\n                            onClick={onCollapse}\n                        />\n                    </Tooltip>\n\n                    {\n                        isLoggedIn &&\n                        <Tooltip disableFocusListener title='Reply' enterDelay={350}>\n                            <ReplyIcon className={classes.toolbarButton} onClick={handleReplyClick}/>\n                        </Tooltip>\n                    }\n\n                    {\n                        isLoggedIn && post.parentId === 0 &&\n                        <React.Fragment>\n                            {\n                                post.pinned &&\n                                <Tooltip disableFocusListener title='Unpin Thread' enterDelay={350}>\n                                    <StarIcon className={classes.toolbarButton} onClick={onPinned}/>\n                                </Tooltip>\n                            }\n                            {\n                                !post.pinned &&\n                                <Tooltip disableFocusListener title='Pin Thread' enterDelay={350}>\n                                    <StarBorderIcon className={classes.toolbarButton} onClick={onPinned}/>\n                                </Tooltip>\n                            }\n                        </React.Fragment>\n                    }\n\n                    <TagButton postId={post.id} className={classes.toolbarButton}/>\n\n                    <Tooltip disableFocusListener title='View Post @ Shacknews.com' enterDelay={350}>\n                        <a\n                            className={classes.toolbarButton}\n                            target='_blank'\n                            rel=\"noopener noreferrer\"\n                            href={`http://www.shacknews.com/chatty?id=${post.id}#item_${post.id}`}\n                        >\n                            <ExitToAppIcon className={classes.toolbarButton}/>\n                        </a>\n                    </Tooltip>\n                </CardActions>\n            </Card>\n\n            {\n                replyBoxOpenForId === post.id &&\n                <ReplyBox parentId={post.id} onCloseReplyBox={onCloseReplyBox} className={classes.replyBox}/>}\n        </React.Fragment>\n    )\n}\n\nconst useStyles = makeStyles({\n    card: {\n        backgroundColor: '#202224',\n        borderRadius: 0,\n        marginBottom: 3\n    },\n    replyBorder: {\n        border: '1px solid #656565'\n    },\n    replyBox: {\n        marginTop: -3\n    },\n    tagNws: {\n        borderLeft: '3px solid red !important'\n    },\n    tagInformative: {\n        borderLeft: '3px solid #00bff3 !important'\n    },\n    tagFrontpage: {\n        borderLeft: '3px solid mediumpurple !important'\n    },\n    content: {\n        maxWidth: 'calc(100vw - 32)',\n        color: 'lightgray',\n        fontSize: 13,\n        padding: '8px 16px'\n    },\n    header: {\n        backgroundColor: '#373a3c',\n        padding: '3px 3px 3px 16px',\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    actions: {\n        height: 34\n    },\n    flex: {\n        flex: 1\n    },\n    toolbarButton: {\n        width: 18,\n        height: 18,\n        cursor: 'pointer',\n        color: '#fff',\n        marginRight: 6\n    },\n    collapsed: {\n        color: '#f00'\n    }\n})\n\nexport default Post\n","import React, {useMemo} from 'react'\nimport PostAuthor from './PostAuthor'\nimport classnames from 'classnames'\nimport Tags from './Tags'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction OneLine({post, thread, onExpandReply}) {\n    const classes = useStyles()\n    const getSnippet = body => {\n        const input = body.replace(/(<(?!span)(?!\\/span)[^>]+>| tabindex=\"1\")/gm, ' ')\n        const maxLength = 106\n\n        let i = 0\n        let len = 0\n        let tag = false\n        let char = false\n        while (i < input.length && len < maxLength) {\n            if (input[i] === '<') {\n                tag = true\n            } else if (input[i] === '>') {\n                tag = false\n            } else if (input[i] === '&') {\n                char = true\n            } else if (input[i] === '' && char) {\n                char = false\n                len++\n            } else if (!tag) {\n                len++\n            }\n\n            i++\n        }\n\n        let output = input.slice(0, i).trim()\n        if (i < input.length || !output) {\n            output += '...'\n        }\n\n        return output\n    }\n\n    const lineClass = `oneline${post.recentReplyNumber || 9}`\n    const oneline = useMemo(() => getSnippet(post.body), [post.body])\n\n    return (\n        <div className={classes.container}>\n                <span\n                    className={classnames(classes.oneline, classes[lineClass])}\n                    dangerouslySetInnerHTML={{__html: oneline}}\n                    onClick={() => onExpandReply(post.id)}\n                />\n            <Tags tags={post.lols} variant='oneline'/>\n            <PostAuthor post={post} thread={thread}/>\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    container: {\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    separator: {\n        padding: '0 3px',\n        fontSize: 11,\n        color: '#fff'\n    },\n    oneline: {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        '&:hover': {\n            color: '#fff',\n            backgroundColor: '#233548',\n            cursor: 'pointer'\n        }\n    },\n    oneline10: {\n        color: '#777'\n    },\n    oneline9: {\n        color: '#888'\n    },\n    oneline8: {\n        color: '#999'\n    },\n    oneline7: {\n        color: '#aaa'\n    },\n    oneline6: {\n        color: '#bbb'\n    },\n    oneline5: {\n        color: '#ccc'\n    },\n    oneline4: {\n        color: '#ddd'\n    },\n    oneline3: {\n        color: '#eee'\n    },\n    oneline2: {\n        color: '#fff'\n    },\n    oneline1: {\n        color: '#eee',\n        fontWeight: 'bold'\n    }\n})\n\nexport default OneLine\n","import React, {useContext} from 'react'\nimport Post from './Post'\nimport OneLine from './OneLine'\nimport FilterContext from '../context/filter/FilterContext'\n\nfunction Comments({thread = {}, parent = thread, onCollapseReply, onExpandReply, onOpenReplyBox, expandedReplyId, replyBoxOpenForId, onCloseReplyBox}) {\n    const {isPostVisible} = useContext(FilterContext)\n    return (\n        <ul className='comments'>\n            {\n                thread.posts\n                    .filter(post => post.parentId === parent.id)\n                    .filter(post => isPostVisible(thread, post))\n                    .map(post =>\n                        <li key={post.id}>\n                            {\n                                expandedReplyId === post.id\n                                    ? <Post\n                                        post={post}\n                                        thread={thread}\n                                        onCollapse={onCollapseReply}\n                                        replyBoxOpenForId={replyBoxOpenForId}\n                                        onOpenReplyBox={onOpenReplyBox}\n                                        onCloseReplyBox={onCloseReplyBox}\n                                    />\n                                    : <OneLine\n                                        post={post}\n                                        thread={thread}\n                                        onExpandReply={onExpandReply}\n                                    />\n                            }\n                            <Comments\n                                thread={thread}\n                                parent={post}\n                                expandedReplyId={expandedReplyId}\n                                replyBoxOpenForId={replyBoxOpenForId}\n                                onExpandReply={onExpandReply}\n                                onCollapseReply={onCollapseReply}\n                                onOpenReplyBox={onOpenReplyBox}\n                                onCloseReplyBox={onCloseReplyBox}\n                            />\n                        </li>\n                    )\n            }\n        </ul>\n    )\n}\n\nexport default Comments\n","import React, {useContext, useMemo, useState} from 'react'\nimport Post from './Post'\nimport Comments from './Comments'\nimport ChattyContext from '../context/chatty/ChattyContext'\nimport FilterContext from '../context/filter/FilterContext'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction Thread({thread: rawThread}) {\n    const classes = useStyles()\n    const [expandedReplyId, setExpandedReplyId] = useState(null)\n    const [replyBoxOpenForId, setReplyBoxOpenForId] = useState(null)\n    const {markThread} = useContext(ChattyContext)\n    const {isPostVisible} = useContext(FilterContext)\n    const thread = useMemo(() => {\n        const posts = rawThread.posts ? rawThread.posts.sort((a, b) => a.id - b.id) : []\n\n        // oneline highlights\n        posts.slice(-10)\n            .reverse()\n            .forEach((post, index) => post.recentReplyNumber = index + 1)\n\n        const [post] = posts\n        return {\n            ...rawThread,\n            ...post,\n            id: +rawThread.threadId,\n            posts: posts\n        }\n    }, [rawThread])\n    if (!isPostVisible(rawThread)) return null\n\n    const handleExpandReply = expandedReplyId => {\n        setExpandedReplyId(expandedReplyId)\n        setReplyBoxOpenForId(null)\n    }\n    const handleCollapseReply = () => {\n        setExpandedReplyId(null)\n        setReplyBoxOpenForId(null)\n    }\n    const handleOpenReplyBox = id => setReplyBoxOpenForId(id)\n    const handleCloseReplyBox = () => setReplyBoxOpenForId(null)\n\n    const handleCollapse = () => markThread(thread.threadId, thread.collapsed ? 'unmarked' : 'collapsed')\n    const togglePinned = () => markThread(thread.threadId, thread.pinned ? 'unmarked' : 'pinned')\n\n    return (\n        <div className={classes.thread}>\n            <Post\n                post={thread}\n                thread={thread}\n                replyBoxOpenForId={replyBoxOpenForId}\n                onCollapse={handleCollapse}\n                onOpenReplyBox={handleOpenReplyBox}\n                onCloseReplyBox={handleCloseReplyBox}\n                onPinned={togglePinned}\n            />\n\n            <Comments\n                thread={thread}\n                expandedReplyId={expandedReplyId}\n                replyBoxOpenForId={replyBoxOpenForId}\n                onExpandReply={handleExpandReply}\n                onCollapseReply={handleCollapseReply}\n                onOpenReplyBox={handleOpenReplyBox}\n                onCloseReplyBox={handleCloseReplyBox}\n            />\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    thread: {\n        marginBottom: 15\n    }\n})\n\nexport default Thread\n","import React, {useContext} from 'react'\nimport Thread from '../thread/Thread'\nimport ChattyContext from '../context/chatty/ChattyContext'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction Chatty() {\n    const classes = useStyles()\n    const {threads} = useContext(ChattyContext)\n    return (\n        <div className={classes.chatty}>\n            {threads.map(thread => <Thread key={thread.threadId} thread={thread}/>)}\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    chatty: {\n        margin: '72px 8px 8px 8px',\n        font: '12px/1.5 arial, helvetica, clean, sans-serif'\n    }\n})\n\nexport default Chatty\n","import React from 'react'\nimport {Route, Switch} from 'react-router-dom'\nimport Nav from '../nav/Nav'\nimport Chatty from '../chatty/Chatty'\n\nfunction App() {\n    return (\n        <React.Fragment>\n            <Nav/>\n            <Switch>\n                <Route path=\"/chatty\" component={Chatty}/>\n\n                <Route component={Chatty}/>\n            </Switch>\n        </React.Fragment>\n    )\n}\n\nexport default App\n","import React, {useContext, useState} from 'react'\nimport AuthContext from './AuthContext'\nimport fetchJson from '../../util/fetchJson'\nimport IndicatorContext from '../indicators/IndicatorContext'\n\nfunction AuthProvider({children}) {\n    const {setLoading} = useContext(IndicatorContext)\n    const [credentials, setCredentials] = useState(() => {\n        try {\n            const storageValue = localStorage.getItem('auth') || '{}'\n            const {username, password} = JSON.parse(storageValue) || {}\n            return {username, password}\n        } catch (ex) {\n            console.log('Invalid storage value: auth', ex)\n            localStorage.removeItem('auth')\n            return {username: null, password: null}\n        }\n    })\n\n    const login = async (username, password) => {\n        try {\n            setLoading('async')\n\n            const result = await fetchJson(`verifyCredentials`, {method: 'POST', body: {username, password}})\n\n            if (result.isValid) {\n                localStorage.setItem('auth', JSON.stringify({username, password}))\n                setCredentials({username, password})\n            } else {\n                console.log('Invalid login credentials.')\n                // TODO: toast user\n            }\n        } catch (ex) {\n            console.log('Error while logging in', ex)\n            // TODO: toast user\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    const logout = () => {\n        localStorage.removeItem('auth')\n        setCredentials({username: null, password: null})\n    }\n\n    const isLoggedIn = credentials.username && credentials.password\n    const contextValue = {...credentials, isLoggedIn, login, logout}\n\n    return (\n        <AuthContext.Provider value={contextValue}>\n            {children}\n        </AuthContext.Provider>\n    )\n}\n\nexport default AuthProvider\n","import React, {useContext, useEffect, useState} from 'react'\nimport ChattyContext from './ChattyContext'\nimport fetchJson from '../../util/fetchJson'\nimport AuthContext from '../auth/AuthContext'\nimport IndicatorContext from '../indicators/IndicatorContext'\n\nfunction ChattyProvider({children}) {\n    let mounted = true\n    const {isLoggedIn, username} = useContext(AuthContext)\n    const {setLoading} = useContext(IndicatorContext)\n\n    const [chatty, setChatty] = useState({threads: [], newThreads: []})\n\n    const [events, setEvents] = useState([])\n    const [lastEventId, setLastEventId] = useState(null)\n\n    const updateThreads = async (freshThreads = false, freshMarkedPosts = false, includeNewThreads = false) => {\n        // fresh chatty load from server\n        let {threads: nextThreads} = freshThreads ? await getChatty() : {}\n\n        // process marked posts if needed\n        let markedPosts\n        if (freshMarkedPosts) markedPosts = await getMarkedPosts(freshMarkedPosts)\n\n        // compile new thread state\n        nextThreads = nextThreads || chatty.threads\n\n        // only add in new threads when needed\n        nextThreads = includeNewThreads ? chatty.newThreads.concat(nextThreads) : nextThreads\n        let nextNewThreads = includeNewThreads ? [] : chatty.newThreads\n\n        // if we're loading marked posts, process the data\n        if (markedPosts) {\n            const markedPostsById = markedPosts\n                .reduce((acc, post) => ({\n                    ...acc,\n                    [post.id]: post.type\n                }), {})\n\n            // update post markings\n            nextThreads = nextThreads\n                .map(thread => ({\n                    ...thread,\n                    pinned: markedPostsById[thread.threadId] === 'pinned',\n                    collapsed: markedPostsById[thread.threadId] === 'collapsed'\n                }))\n        }\n\n        // order by recent activity\n        let maxPostIdByThread = nextThreads\n            .reduce((acc, thread) => {\n                acc[thread.threadId] = thread.posts.reduce((acc, post) => Math.max(post.id, acc), 0)\n                return acc\n            }, {})\n\n        // TODO: remove expired threads\n\n        // sort by activity, pinned first\n        nextThreads = nextThreads\n            .sort((a, b) => maxPostIdByThread[b.threadId] - maxPostIdByThread[a.threadId])\n            .sort((a, b) => b.pinned - a.pinned)\n\n        setChatty({\n            threads: nextThreads,\n            newThreads: nextNewThreads\n        })\n\n        if (markedPosts) {\n            // clean up any old collapsed posts after loading, doesn't impact state\n            let promises = markedPosts\n                .filter(post => !maxPostIdByThread[post.id])\n                .map(({id}) => markThread(id, 'unmarked', false))\n            await Promise.all(promises)\n        }\n    }\n\n    const fullReload = async () => {\n        try {\n            setLoading('async')\n\n            const {eventId} = await fetchJson('getNewestEventId')\n            await updateThreads(true, true, false)\n            setLastEventId(eventId)\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    const waitForEvent = async () => {\n        if (mounted && lastEventId) {\n            const {lastEventId: newerEventId, events, error} = await fetchJson(`waitForEvent?lastEventId=${lastEventId}`)\n\n            if (mounted) {\n                if (!error) {\n                    setEvents(events)\n                    setLastEventId(newerEventId)\n                } else {\n                    // TODO: handle eventing error, probably need to restart events / reload chatty\n                    console.log('Error from API:waitForLastEvent call.', error)\n                }\n            }\n        }\n    }\n\n    const getMarkedPosts = async () => {\n        if (isLoggedIn) {\n            const {markedPosts} = await fetchJson(`clientData/getMarkedPosts?username=${encodeURIComponent(username)}`)\n            return markedPosts\n        }\n        return []\n    }\n\n    const getChatty = async threadCount => {\n        return await fetchJson(`getChatty${threadCount > 0 ? `?count=${threadCount}` : ''}`)\n    }\n\n    const handleEvent = async (event = {}) => {\n        const {eventType, eventData} = event\n\n        if (eventType === 'newPost') {\n            const {post} = eventData\n            if (post.parentId) {\n                const threadId = `${post.threadId}`\n                const addReply = thread => {\n                    if (thread.threadId === threadId) {\n                        return {\n                            ...thread,\n                            posts: [\n                                ...thread.posts,\n                                post\n                            ]\n                        }\n                    }\n                    return thread\n                }\n\n                setChatty({\n                    threads: chatty.threads.map(addReply),\n                    newThreads: chatty.newThreads.map(addReply)\n                })\n            } else {\n                setChatty({\n                    threads: chatty.threads,\n                    newThreads: [\n                        ...chatty.newThreads,\n                        {\n                            threadId: `${post.id}`,\n                            posts: [\n                                post\n                            ]\n                        }\n                    ]\n                })\n            }\n        } else if (eventType === 'categoryChange') {\n            const {postId, category} = eventData\n            const updateCategory = thread => {\n                const threadContainsUpdate = thread.posts.find(post => post.id === postId)\n                if (threadContainsUpdate) {\n                    const posts = thread.posts\n                        .map(post => {\n                            if (post.id === postId) {\n                                return {...post, category}\n                            }\n                            return post\n                        })\n                    return {...thread, posts}\n                }\n                return thread\n            }\n\n            setChatty({\n                threads: chatty.threads.map(updateCategory),\n                newThreads: chatty.newThreads.map(updateCategory)\n            })\n        } else if (eventType === 'lolCountsUpdate') {\n            const {updates} = eventData\n            const updatedPostsById = updates\n                .reduce(((acc, {postId, tag, count}) => ({\n                    ...acc,\n                    [postId]: {tag, count}\n                })), {})\n            const updateTags = thread => {\n                const threadContainsUpdate = thread.posts.find(post => updatedPostsById[post.id])\n                if (threadContainsUpdate) {\n                    const posts = thread.posts\n                        .map(post => {\n                            const updated = updatedPostsById[post.id]\n                            if (updated) {\n                                const lols = (post.lols || [])\n                                    .filter(tag => tag.tag !== updated.tag)\n                                    .concat([updated])\n                                return {...post, lols}\n                            }\n                            return post\n                        })\n                    return {...thread, posts}\n                }\n                return thread\n            }\n\n            setChatty({\n                threads: chatty.threads.map(updateTags),\n                newThreads: chatty.newThreads.map(updateTags)\n            })\n        } else {\n            console.debug('Unhandled event type:', event)\n        }\n    }\n\n    const refreshChatty = async () => {\n        await updateThreads(false, false, true)\n        window.scrollTo(0, 0)\n    }\n\n    const markThread = async (postId, type, updateThreads = true) => {\n        if (isLoggedIn) {\n            await fetchJson('clientData/markPost', {\n                method: 'POST',\n                body: {username, postId, type}\n            })\n        }\n\n        if (updateThreads) {\n            const threadId = `${postId}`\n            setChatty({\n                threads: chatty.threads\n                    .map(thread => {\n                        if (thread.threadId === threadId) {\n                            return {\n                                ...thread,\n                                pinned: type === 'pinned',\n                                collapsed: type === 'collapsed'\n                            }\n                        }\n                        return thread\n                    }),\n                newThreads: chatty.newThreads\n            })\n        }\n    }\n\n    // full load of chatty on start\n    useEffect(() => {\n        fullReload()\n        return () => mounted = false\n    }, [isLoggedIn])\n\n    // wait for events\n    useEffect(() => {\n        waitForEvent(lastEventId)\n    }, [lastEventId])\n\n    // handle events\n    useEffect(() => {\n        events.forEach(event => handleEvent(event))\n    }, [events])\n\n    const contextValue = {\n        ...chatty,\n        refreshChatty,\n        markThread\n    }\n\n    return (\n        <ChattyContext.Provider value={contextValue}>\n            {children}\n        </ChattyContext.Provider>\n    )\n}\n\nexport default ChattyProvider\n","import React from 'react'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {makeStyles} from '@material-ui/styles'\n\nfunction AsyncLoadingIndicator({loading}) {\n    const classes = useStyles()\n    if (loading !== 'async') return null\n    return <LinearProgress className={classes.progress} color='secondary'/>\n}\n\nconst useStyles = makeStyles({\n    progress: {\n        zIndex: 9999,\n        position: 'fixed',\n        top: 0,\n        width: '100vw'\n    }\n})\n\nexport default AsyncLoadingIndicator\n","import React, {useState} from 'react'\nimport IndicatorContext from './IndicatorContext'\nimport AsyncLoadingIndicator from './AsyncLoadingIndicator'\n\nfunction IndicatorProvider({children}) {\n    const [loading, setLoading] = useState(false)\n\n    const showToast = msg => {\n        // TODO: hook to toasts and replace other TODOs\n    }\n\n    const contextValue = {\n        setLoading,\n        showToast\n    }\n\n    return (\n        <IndicatorContext.Provider value={contextValue}>\n            <AsyncLoadingIndicator loading={loading}/>\n            {children}\n        </IndicatorContext.Provider>\n    )\n}\n\nexport default IndicatorProvider\n","import React, {useState} from 'react'\nimport FilterContext from './FilterContext'\n\nfunction FilterProvider({children}) {\n    const [filterSettings, setFilterSettings] = useState({\n        showCollapsed: false,\n        showFilteredUsers: false,\n        filteredUsers: [],\n        showFilteredTerms: false,\n        filteredTerms: []\n    })\n\n    const isPostVisible = (thread, post = thread) => {\n        const {\n            showCollapsed,\n            showFilteredUsers, filteredUsers,\n            showFilteredTerms, filteredTerms\n        } = filterSettings\n\n        if (!showCollapsed && thread.collapsed) return false\n        else if (!showFilteredUsers && filteredUsers.some(({regex}) => regex.test(post.author))) return false\n        else if (!showFilteredTerms && filteredTerms.some(({regex}) => regex.test(post.body))) return false\n\n        return true\n    }\n\n    const contextValue = {\n        filterSettings,\n        setFilterSettings,\n        isPostVisible\n    }\n\n    return (\n        <FilterContext.Provider value={contextValue}>\n            {children}\n        </FilterContext.Provider>\n    )\n}\n\nexport default FilterProvider\n","import createHistory from 'history/createBrowserHistory'\nconst history = createHistory({})\nexport default history\n","import React from 'react'\nimport {ThemeProvider} from '@material-ui/styles'\nimport Theme from './Theme'\nimport App from './App'\nimport AuthProvider from '../context/auth/AuthProvider'\nimport ChattyProvider from '../context/chatty/ChattyProvider'\nimport './global.css'\nimport './shacktags.css'\nimport './comment_tree.css'\nimport IndicatorProvider from '../context/indicators/IndicatorProvider'\nimport FilterProvider from '../context/filter/FilterProvider'\nimport {Router} from 'react-router-dom'\nimport history from '../history'\n\nfunction Root() {\n    return (\n        <Router history={history}>\n            <ThemeProvider theme={Theme}>\n                <IndicatorProvider>\n                    <AuthProvider>\n                        <ChattyProvider>\n                            <FilterProvider>\n                                <App/>\n                            </FilterProvider>\n                        </ChattyProvider>\n                    </AuthProvider>\n                </IndicatorProvider>\n            </ThemeProvider>\n        </Router>\n    )\n}\n\nexport default Root\n","import './installStyle'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport Root from './app/Root'\n\nconst render = Component => ReactDOM.render(<Component/>, document.getElementById('root'))\n\nrender(Root)\n\nif (module.hot) {\n    module.hot.accept('./app/Root', () => {\n        const next = require('./app/Root').default\n        render(next)\n    })\n}\n"],"sourceRoot":""}